###*
  @class core.obj
    オブジェクトを操作します。
###
core_array = require("./array")

#==============================================================================
# method
#==============================================================================
###*
  @method setMapVal
  オブジェクトの構造を指定して一度に値を設定します。
  @param {Object} target 初期化する連想配列
  @param {Array} mapList 構造を記述したマップ配列
  @param {Object} values 設定する値のセット
###
exports.setMapVal = (target, mapList, values) ->
  init = (target, map) =>
    for key in map
      if !@check(target[key])
        target[key] = {}
        
  setChildMapVal = (target, mapList, values) =>
    childMapList = core_array.getPopClone(mapList)
    for key in mapList[0]
      @setMapVal(target[key], childMapList, values)
      
  setInitVal = (target, values) ->
    for key, val of values
      target[key] = val
    
  if mapList.length > 0
    init(target, mapList[0])
    setChildMapVal(target, mapList, values)
  else
    setInitVal(target, values)

###*
  @method check
  Objectか判定します。
  @param {Object} obj 判定対象のデータ
  @return {boolean} 判定結果
###
exports.check = (obj) ->
  obj && obj.constructor == Object

###*
  @method clone
  オブジェクトのクローンを生成します。
  @param {Object} obj クローン元のデータ
  @return {Object} クローンデータ
###
exports.clone = (obj) ->
  f = ->
  f.prototype = obj
  return new f
