#==============================================================================
# require
#==============================================================================
data = require('../data')
web = require('web')
html = require('html')
common_view = require('./common')

#==============================================================================
# data
#==============================================================================
makeSetterArea = () ->
  makeColorSetter = () ->
    dom = []
    nameList = web.color.getColorName()
    for key in data.css.color.param
      dom.push(
        ["tr"]
        [
          ["td", {}, key]
          ["td"]
          html.gui.makeSelectBox(key + "_" + "selectColor", nameList.base)
          ["td"]
          html.gui.makeSelectBox(key + "_" + "selectColorMethod", nameList.side)
        ]
      )
    dom
    
  makeBorderSetter = () ->
    makeSectionSetter = (section) ->
      dom = []
      for key in data.css.border.param
        if key == "style"
          dom.push.apply(dom, common_view.makeSelectBox(section + "_" + key + "_border_select", data.css.border.style, key))
        else
          dom.push.apply(dom, common_view.makeSliderWithInput("border", section + "_" + key + "_border", key))
      dom
    
    dom = []
    htmlSectionArea = []
    for section in data.css.border.section
      if section != "all"
        htmlSectionArea.push(
          ["td", {class: "sectionText"}, section]
          makeSectionSetter(section)
        )
    dom.push(
      ["table"]
      [
        ["td", {class: "sectionText"}, "all"]
        makeSectionSetter("all")
      ]
      ["div", {class: "trigger"}]
      [
        ["div", {class: "triggerText"}, ">>more"]
      ]
      ["div", {class: "contents"}]
      [
        ["table"]
        htmlSectionArea
      ]
    )
    dom
    
  makeSliderParamSetter = (name, param) ->
    dom = []
    for key in param
      dom.push.apply(dom, common_view.makeSliderWithInput(name, key + "_" + name, key))
    dom

  makeFontSetter = () ->
    makeShadowSetter = () ->
      dom = []
      nameList = web.color.getColorName()
      for key in data.css.font.param
        if key.indexOf("shadow") != -1
          dom.push.apply(dom, common_view.makeSectionText(key))
          for shadow_key in data.css.font.shadow.param
            if shadow_key == "color"
              dom.push.apply(dom, common_view.makeColorSelectBox(key + "_" + shadow_key + "_font_select", nameList, shadow_key))
            else
              dom.push.apply(dom, common_view.makeSliderWithInput("font", key + "_" + shadow_key + "_font", shadow_key))
      dom
      
    makeFontParamSetter = () ->
      dom = []
      for key in data.css.font.param
        if key == "family" || key == "align"
          dom.push.apply(dom, common_view.makeSelectBox(key + "_font_select_" + key, data.css.font[key], key))
        else if key.indexOf("shadow") == -1
          dom.push.apply(dom, common_view.makeSliderWithInput("font", key + "_font", key))
      html
    
    dom = []
    dom.push(
      ["table"]
      makeFontParamSetter()
      ["div", {class: "trigger"}]
      [
        ["div", {class: "triggerText"}, ">>more"]
      ]
      ["div", {class: "contents"}]
      [
        ["table"]
        makeShadowSetter()
      ]
    )
    html
      
  makeSpaceSetter = () ->
    makeSectionSetter = (section) ->
      dom = []
      for key in data.css.space.param
        dom.push.apply(dom, common_view.makeSliderWithInputAndSelect("space", section + "_" + key + "_space", section + "_" + key + "_space_selectUnit", data.css.space.unit, key))
      dom
    
    dom = []
    htmlSectionArea = []
    for section in data.css.space.section
      if section != "all"
        htmlSectionArea.push(
          ["td", {class: "sectionText"}, section]
          makeSectionSetter(section)
        )
    dom.push(
      ["table"]
      [
        ["td", {class: "sectionText"}, "all"]
        makeSectionSetter("all")
      ]
      ["div", {class: "trigger"}]
      [
        ["div", {class: "triggerText"}, ">>more"]
      ]
      ["div", {class: "contents"}]
      [
        ["table"]
        htmlSectionArea
      ]
    )
    dom
  
  makeSizeSetter = () ->
    makeSectionSetter = (section) ->
      dom = []
      for key in data.css.size.param
        dom.push.apply(dom, common_view.makeSliderWithInputAndSelect("size", section + "_" + key + "_size", section + "_" + key + "_size_selectUnit", data.css.size.unit, key))
      dom
    
    dom = []
    htmlSectionArea = []
    for section in data.css.size.section
      if section != "normal"
        htmlSectionArea.push(
          ["td", {class: "sectionText"}, section]
          makeSectionSetter(section)
        )
    dom.push(
      ["table"]
      [
        makeSectionSetter("normal")
      ]
      ["div", {class: "trigger"}]
      [
        ["div", {class: "triggerText"}, ">>more"]
      ]
      ["div", {class: "contents"}]
      [
        ["table"]
        htmlSectionArea
      ]
    )
    dom
    
  makeSelectParamSetter = (name, css) ->
    dom = []
    for key in css.param
      dom.push.apply(dom, common_view.makeSelectBox(key + "_" + css.name + "_select_" + key, css[key], key))
    dom
    
  makePositionSetter = () ->
    makeSetter = () ->
      dom = []
      for key in data.css.position.param
        if key == "z-index"
          dom.push.apply(dom, common_view.makeSliderWithInput("position", key + "_position", key))
        else if key == "top" || key == "left" || key == "bottom" || key == "right"
          dom.push.apply(dom, common_view.makeSliderWithInputAndSelect("position", key + "_position", key + "_position_selectUnit", data.css.position.unit, key))
        else if key == "overflow-x" || key == "overflow-y"
          dom.push.apply(dom, common_view.makeSelectBox(key + "_position_select", data.css.position.overflow, key))
        else
          dom.push.apply(dom, common_view.makeSelectBox(key + "_position_select", data.css.position[key], key))
      dom
      
    dom = []
    dom.push(
      ["table"]
      makeSetter()
    )
    dom

  makeBackgroundSetter = () ->
    makeSetter = () ->
      dom = []
      for key in data.css.background.param
        if key == "x" || key == "y"
          dom.push.apply(dom, common_view.makeSliderWithInputAndSelect("background", key + "_background", key + "_background_selectUnit", data.css.background.unit, key))
        else
          dom.push.apply(dom, common_view.makeSelectBox(key + "_background_select", data.css.background[key], key))
      dom
      
    dom = []
    dom.push(
      ["table"]
      makeSetter()
    )
    dom
    
  makeGradientSetter = () ->
    dom = []
    nameList = web.color.getColorName()
    for key in data.css.gradient.param
      if key.indexOf("color") != -1
        dom.push(
          ["tr"]
          [
            ["td", {}, key]
            ["td"]
            html.gui.makeSelectBox(key + "_" + data.css.gradient.name + "_selectColor", nameList.base)
            html.gui.makeSelectBox(key + "_" + data.css.gradient.name + "_selectColorMethod", nameList.side)
          ]
        )
      else if key == "direction"
        dom.push.apply(dom, common_view.makeSelectBox(key + "_" + data.css.gradient.name + "_select", data.css.gradient[key], key))
      else
        dom.push.apply(dom, common_view.makeSliderWithInput(data.css.gradient.name, key + "_" + data.css.gradient.name, key))
    dom
    
  makeAnimationSetter = () ->
    dom = []
    for key in data.css.animation.param
      if key == "trigger"
        dom.push.apply(dom, common_view.makeSelectBox(key + "_" + data.css.animation.name + "_select", data.css.animation[key], key))
      else
        dom.push.apply(dom, common_view.makeSliderWithInput(data.css.animation.name, key + "_" + data.css.animation.name, key))
    dom
    
  dom = []
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.animation.name, makeAnimationSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.position.name, makePositionSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.size.name, makeSizeSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.space.name, makeSpaceSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.color.name, makeColorSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.gradient.name, makeGradientSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.background.name, makeBackgroundSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.font.name, makeFontSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.border.name, makeBorderSetter()))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.shadow.name, makeSliderParamSetter("shadow", data.css.shadow.param)))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.transform.name, makeSliderParamSetter("transform", data.css.transform.param)))
  dom.push.apply(dom, common_view.makeSetterHeader(data.css.opacity.name, makeSliderParamSetter("opacity", data.css.opacity.param)))
  dom

dom = common_view.makeHeader("css", "edit", "css",
  [
    ["div", {class: "headerArea"}]
    [
      ["div", {class: "inline"}, "element"]
      ["input", {class:"webeleName", id:"webeleName_input", type:"text", size: "10", value: "none"}]
      ["div", {class: "inline"}, "state"]
      html.gui.makeSelectBox("animationState_select", data.css.animation.state)
      ["br"]
      ["div", {class: "inline"}, "responsive"]
      html.gui.makeSelectBox("responsive_select", data.css.responsive)
      ["div", {class: "inline"}, "max"]
      html.gui.makeSelectBox("responsiveMax_select", data.css.responsive)
    ]
    ["div", {class: "contentsArea"}]
    makeSetterArea()
  ]
)

console.log(html.core.make(dom))
$("#webCustomizerArea").append(html.core.make(dom))