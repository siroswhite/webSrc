data = require('./data')
html = require('html')
web = require('web')

#==============================================================================
# exports
#==============================================================================
getHeader = (id, iconName, domList) ->
  dom = [
    ["div", {id:id, class:"webCustomizer box_accordion draggable"}]
    [
      ["div", {class: "trigger fixed"}]
      [
        html.dom.icon(id + "Icon", iconName, "fa-2x")
      ]
      ["div", {class: "contents"}]
      domList
    ]
  ]
  dom

getSetter = (setterDataList) ->
  makeSlider = (id, lavel) ->
    slider = html.dom.slider(id)
    [
      ["tr"]
      [
        ["td", {}, lavel]
        ["td"]
        [
          slider.slider
        ]
        ["td"]
        [
          slider.input
        ]
      ]
    ]

  makeSliderWithUnit = (id, lavel, list) ->
    slider = html.dom.slider(id)
    [
      ["tr"]
      [
        ["td", {}, lavel]
        ["td"]
        [
          slider.slider
        ]
        ["td"]
        [
          slider.input
        ]
        ["td"]
        html.dom.selectBox(id + "_unit", list)
      ]
    ]
    
    
  makeSelectBox = (id, lavel, list) ->
    [
      ["tr"]
      [
        ["td", {}, lavel]
        ["td"]
        html.dom.selectBox(id, list)
      ]
    ]

  makeColorSelect = (id, lavel) ->
    nameList = web.color.getColorName()
    [
      ["tr"]
      [
        ["td", {}, lavel]
        ["td", {colspan:2}]
        html.dom.selectBox(id + "_color", nameList.color)
        html.dom.selectBox(id + "_tone", nameList.tone)
      ]
    ]
  makeContents = (setterName, setterData) ->
    dom = []
    for key, param of setterData
      if param.child
        for childKey in param.child
          dom.push.apply(dom,
            [
              ["td", {class:"sub", colspan:"3"}, childKey]
              makeContents(setterName + "-" + childKey, param)
            ]
          )
      else
        id = setterName + "-" + key
        switch param.gui
          when "slider", "sliderRange"
            dom.push.apply(dom, makeSlider(id, key))
          when "select"
            dom.push.apply(dom, makeSelectBox(id, key, param.select))
          when "sliderWithInput"
            dom.push.apply(dom, makeSliderWithUnit(id, key, param.val.unitType))
          when "color"
            dom.push.apply(dom, makeColorSelect(id, key))
    dom

  dom = []
  for key, setterData of setterDataList
    dom.push.apply(dom, [
      ["div", {id:key + "Setter" , class:"setterArea box_accordion"}]
        [
          ["div", {class:"trigger"}, key]
          ["div", {class: "contents"}]
          [
            ["table"]
            makeContents(key, setterData)
          ]
        ]
      ]
    )
  dom

getChanger = () ->
  getCSS = () ->
    getHeader("cssChanger", "edit",
      [
        ["div", {class: "headerArea"}]
        [
          ["div", {class: "headerFunction"}]
          [
            ["span", {}, "element"]
            html.dom.input("webeleName_input", 10, "none", "webeleName")
            ["span", {}, "state"]
            html.dom.selectBox("animationState_select", data.animationState)
            ["span", {}, "animAll"]
            html.dom.checkbox("animAll_checked", "true")
          ]
          ["div", {class: "headerFunction"}]
          [
            ["span", {}, "responsive"]
            html.dom.input("responsive_input", 7, "exSmall")
            ["span", {}, "max"]
            html.dom.selectBox("responsiveMax_select", data.responsiveList)
            ["span", {}, "resAll"]
            html.dom.checkbox("resAll_checked", "true")
          ]
        ]
        ["div", {class: "contentsArea css"}]
        getSetter(data.css)
      ]
    )

  getColorScheme = () ->
    getHeader("colorSchemeChanger", "tint",
      [
        ["div", {class: "headerArea"}]
        ["div", {class: "contentsArea"}]
        [
          ["div", {id: "colorpicker_webCustomizer"}]
          ["input", {id: "colorInput_webCustomizer", type: "text", value: "0:0:0_#000000"}]
        ]
      ]
    )

  getOption = () ->
    getHeader("optionChanger", "gear",
      [
        ["div", {class: "headerArea"}]
        ["div", {class: "contentsArea option"}]
        getSetter(data.option)
      ]
    )

  getData = () ->
    getHeader("dataChanger", "save",
      [
        ["div", {class: "headerArea"}]
        ["div", {class: "contentsArea"}]
        [
          ["div", {}, "GlobalChash"]
          [
            ["button", {id: "global_save", type: "button", href: "data:test.txt"}, "Save"]
            ["button", {id: "global_clear", type: "button"}, "Clear"]
          ]
          ["div", {}, "PageChash"]
          [
            ["button", {id: "page_save", type: "button"}, "Save"]
            ["button", {id: "page_clear", type: "button"}, "Clear"]
          ]
          ["div", {}, "File"]
          [
            ["input", {id: "loader", class:"displayNone" , type: "file"}]
            ["br"]
            ["button", {id: "saveAsFile", type: "button"}, "Save"]
            ["button", {id: "loadFromFile", type: "button"}, "Load"]
          ]
          ["div", {}, "Code"]
          [
            ["button", {id: "generateCodes", type: "button"}, "GenerateCodes"]
          ]
        ]
      ]
    )

  dom = []
  dom.push.apply(dom, getCSS())
  dom.push.apply(dom, getColorScheme())  
  dom.push.apply(dom, getOption())
  dom.push.apply(dom, getData())
  dom
#console.log html.core.make(getChanger())
$("#webCustomizerArea").append(html.core.make(getChanger()))