#==============================================================================
# require
#==============================================================================
debug = require("debug")
core  = require("core")
web   = require("web")
data  = require('./data')
css   = require("css")
event_trans      = require("event/trans")

#==============================================================================
# define
#==============================================================================
webeleName       = "BG"
responsiveName   = web.size.chooseResponsiveMax(web.size.getResponsiveName(), data.responsiveMax)
responsiveSelect = ""
animationSelect  = "start"
styleSheet       = document.styleSheets[document.styleSheets.length - 1]
cssRulesNumber   = styleSheet.cssRules.length
allCSS           = ""

#==============================================================================
# interface
#==============================================================================
exports.init = () ->
  initSlider = () ->
    setSlider = (key_css, css) ->
      for key_param, param of css
        if param.child
          setSlider(key_css, param)
        else
          if param.gui and param.gui.indexOf("slider") != -1
              $(".slider[id^='" + key_css + "'][id$='" + key_param + "']").slider(
                max: param.range.max
                min: param.range.min
                step: param.range.step
                if param.gui == "sliderRange"
                  range: true
              )
    for key, param of data.css
      setSlider(key, param)
    for key, param of data.option
      setSlider(key, param)

  initEvent = () =>
    commonEvent = (id, val) ->
      setWebeleData = (cssID, paramKey) ->
        setSelectData = (key_res, key_anim) ->
          setVal = (webeleData) ->
            switch webeleData.gui
              when "slider", "select"
                webeleData.val = val
              when "sliderWithInput"
                if cssID[1] == "unit"
                  webeleData.val.unit = val
                else
                  webeleData.val.num = val
              when "sliderRange"
                val = val.split(",") if !(val instanceof Array)
                webeleData.val.first = val[0]
                webeleData.val.second = val[1]
              when "color"
                if cssID[1] == "color"
                  webeleData.val.color = val
                else
                  webeleData.val.tone = val

          webeleData = data.webele[key_res][webeleName]      
          if paramKey[0] != "animation"
            webeleData = webeleData[key_anim]

          allNum = $.inArray("all", paramKey)
          if allNum == -1
            webeleData = core.obj.selectArray(webeleData, paramKey)
            setVal(webeleData)
            setGUIVal(cssID[0], webeleData.gui, webeleData)
          else
            webeleDataList = core.obj.parallelLoop(webeleData, paramKey, allNum)
            for key, param of webeleDataList
              setVal(param)
              setGUIVal(key, param.gui, param)

        if $("#resAll_checked:checked").val()
          resList = data.responsiveList
        else
          resList = [responsiveSelect]

        if $("#animAll_checked:checked").val()
          animList = data.animationState
        else
          animList = [animationSelect]

        for key_res in resList
          for key_anim in animList
            setSelectData(key_res, key_anim)

      cssID = id.split("_")
      paramKey = cssID[0].split("-")
      setWebeleData(cssID, paramKey)
      setCSS(paramKey[0])

    $('*').bind 'contextmenu', (e) =>
      if $(e.currentTarget).data(data.name)
        webeleName = $(e.currentTarget).data(data.name)
      else
        webeleName = $(e.currentTarget).parents("[data-" + data.name + "]").data(data.name)
      $("#webeleName_input").val(webeleName)
      setData()
      false

    $(window).resize (e) =>
      responsiveSelect = web.size.chooseResponsiveMax(web.size.getResponsiveName(), data.responsiveMax)
      $("#responsive_input").val(responsiveSelect)
      #debug.test.startTimer("test")
      setData()
      setCSS()
      #debug.test.endTimer("test")

    $("#webeleName_input").change (e) =>
      webeleName = $(e.currentTarget).val()
      setData()

    $("#animationState_select").change (e) =>
      animationSelect = $(e.currentTarget).val()
      setData()

    $("#responsiveMax_select").change (e) =>
      data.responsiveMax = $(e.currentTarget).val()
      $(window).trigger("resize")

    $(".css .setterArea .select").change (e) =>
      commonEvent($(e.currentTarget).attr("id"), $(e.currentTarget).val())
      
    $(".css .setterArea .slider").bind 'slide', (e, ui) =>
      val = ui.value
      val = ui.values if ui.values
      commonEvent($(e.currentTarget).attr("id"), val)

    $('.css .setterArea .sliderInput').change (e) =>
      commonEvent($(e.currentTarget).attr("id"), $(e.currentTarget).val())

    $('.option .setterArea .sliderInput').change (e) =>
      data.optionData.trans.time.val = $(e.currentTarget).val()
      $("#" + $(e.currentTarget).attr("id").split("_input")[0]).slider(value: $(e.currentTarget).val())
      setTransOption()

    $(".option .setterArea .select").change (e) =>
      data.optionData.trans.method.val = $(e.currentTarget).val()
      setTransOption()
    
    $(".option .setterArea .slider").bind 'slide', (e, ui) =>
      $("#" + $(e.currentTarget).attr('id') + "_input").val(ui.value)
      data.optionData.trans.time.val = ui.value
      setTransOption()

    $('#colorInput_webCustomizer').bind 'change', (event) =>
      getHSL = () -> 
        hslSprit = $("#colorInput_webCustomizer").val().split("_")[0].split(":")
        if hslSprit[0] == "NaN" || hslSprit[1] == "NaN" || hslSprit[2] == "NaN"
          return
        
        return  {
          H: Number(hslSprit[0])
          S: Number(hslSprit[1])
          L: Number(hslSprit[2])
        }
      data.HSL = getHSL()
      data.colorList = web.color.getColorList(data.HSL)
      setCSS()

    #----------------------------------------------------------------------------
    # pageSave
    #----------------------------------------------------------------------------
    $("#page_save").click (event) =>
      data.setCookie()
      alert("ページストレージに保存しました。")

    #----------------------------------------------------------------------------
    # pageClear
    #----------------------------------------------------------------------------
    $("#page_clear").click (event) =>
      data.clearCookie()
      location.reload()

    #----------------------------------------------------------------------------
    # g Save
    #----------------------------------------------------------------------------
    $("#global_save").click (event) =>
      data.setCookie_G()
      alert("グローバルストレージに保存しました。")

    #----------------------------------------------------------------------------
    # g Clear
    #----------------------------------------------------------------------------
    $("#global_clear").click (event) =>
      data.clearCookie_G()
      location.reload()
      
    #----------------------------------------------------------------------------
    # Generate
    #----------------------------------------------------------------------------
    $("#generateCodes").click (event) =>
       console.log(@generateCodes())
       alert("コンソールにコードを出力しました。")

    #----------------------------------------------------------------------------
    # save as file
    #----------------------------------------------------------------------------
    $("#saveAsFile").click (event) =>
       data.saveAsFile()

    #----------------------------------------------------------------------------
    # save as file
    #----------------------------------------------------------------------------
    $("#loadFromFile").click (event) =>
       $("#loader").click()

    #----------------------------------------------------------------------------
    # loadFromFile
    #----------------------------------------------------------------------------
    loadFromFile = (e, parent) =>
      JsonObj = JSON.parse(e.target.result)
      data.webele = JsonObj.webele
      data.HSL = JsonObj.HSL
      data.optionData    = JsonObj.optionData
      data.responsiveMax = JsonObj.responsiveMax
      @init()

    core.file.registFileAPI("#loader", loadFromFile, this)

  setTransOption = () ->
    event_trans.option.method = data.optionData.trans.method.val
    event_trans.option.time = data.optionData.trans.time.val

  init_colorPicker = () ->
    $('#colorpicker_webCustomizer').farbtastic('#colorInput_webCustomizer')
    $.farbtastic('#colorpicker_webCustomizer').setColor(core.calc.hslToRGB(data.HSL))
    data.colorList = web.color.getColorList(data.HSL)

  init_colorPicker()
  initSlider()
  initEvent()
  setTransOption()
  $("#responsiveMax_select").val(data.responsiveMax)
  $(window).trigger("resize")

setGUIVal = (id, gui, webeleData) ->
  switch gui
    when "slider"
      $("#" + id).slider(value: webeleData.val)
      $("#" + id + "_input").val(webeleData.val)
    when "select"
      $("#" + id).val(webeleData.val)
    when "sliderWithInput"
      $("#" + id).slider(value: webeleData.val.num)
      $("#" + id + "_input").val(webeleData.val.num)
      $("#" + id + "_unit").val(webeleData.val.unit)
    when "sliderRange"
      $("#" + id).slider(values: [webeleData.val.first, webeleData.val.second])
      $("#" + id + "_input").val([webeleData.val.first, webeleData.val.second])
    when "color"
      $("#" + id + "_color").val(webeleData.val.color)
      $("#" + id + "_tone").val(webeleData.val.tone)

setData = () ->
  setAreaData = (areaKey, areaParam, areaData) =>
    for key, param of areaParam
      if param.child
        for childKey in param.child
          setAreaData(areaKey + "-" + childKey, param, areaData)
      else
        if param.gui
          nowAreaData = areaData
          if areaKey != "animation" and areaKey != "trans"
            nowAreaData = nowAreaData[animationSelect]
          for areaChildKey in areaKey.split("-")
            nowAreaData = nowAreaData[areaChildKey]
          id = areaKey + "-" + key
          setGUIVal(id, param.gui, nowAreaData[key])

  for areaKey, areaParam of data.css
    setAreaData(areaKey, areaParam, data.webele[responsiveSelect][webeleName])

  for areaKey, areaParam of data.option  
    setAreaData(areaKey, areaParam, data.optionData)

setCSS = (cssKey) ->
  setCSSContents = (cssDataTemp, key, webeleData, cssData, name) ->
    getColorVal = (valData) ->
      data.colorList[valData.color][valData.tone]
    getUnitVal = (valData) ->
      if valData.unit == "auto"
        val = valData.unit
      else
        val = valData.num + valData.unit
      val

    for key_param, param of cssData
      if !param.prop
        continue

      if param.prop.name
        name = param.prop.name
        if param.prop.namePrefix == "key"
          if key != "normal"
            name = key + "-" + name
        if param.prop.namesuffix == "key"
          name = name + "-" + key

      if param.child
        for index, key_child of param.child
          if param.prop and param.prop.headerName
            name = param.prop.headerName + "-" + key_child
          setCSSContents(cssDataTemp, key_child, webeleData[key_child], param, name)

      if param.val != undefined
        val = ""
        valData = webeleData[key_param].val
        switch param.prop.type
          when "val"
            val = valData
          when "px"
            val = valData + "px"
          when "bgImage"
            val = "url(" + param.prop.path + valData + ")"
            switch webeleData.direction.val
              when "none"
                val = val
              when "circle"
                val += ", radial-gradient("
              else
                val += ", linear-gradient(to "
            if webeleData.direction.val != "none"
              val += 
                webeleData.direction.val + ", " +
                data.colorList[webeleData.color1.val.color][webeleData.color1.val.tone] + " " + webeleData.percent.val.first + "%, " +
                data.colorList[webeleData.color2.val.color][webeleData.color2.val.tone] + " " + webeleData.percent.val.second + "%, " +
                data.colorList[webeleData.color3.val.color][webeleData.color3.val.tone] + " 100%)"
          when "color"
            val = getColorVal(valData)
          when "unitVal"
            val = getUnitVal(valData)
          when "position"
            val = webeleData.directionX.val + " " + getUnitVal(webeleData.x.val) + " " + 
                  webeleData.directionY.val + " " + getUnitVal(webeleData.y.val)
          when "border"
            val = webeleData.style.val + " " + webeleData.width.val + "px " + getColorVal(webeleData.color.val)
          when "radius"
            val = webeleData.topLeft.val + "px " + webeleData.topRight.val + "px " + webeleData.bottomLeft.val + "px " + webeleData.bottomRight.val + "px"
          when "linkColor"
            cssDataTemp.child[key_param] =
              selector:
                name: webeleData[key_param].prop.selector
                event: webeleData[key_param].prop.event
              tag:
                color: getColorVal(valData) + " !important"
                transition: "all " + data.webele[key_res][key_webele].animation.time.val + "s ease-in-out"
            continue
          when "hdecoretion"
            cssDataTemp.child[key_param] =
              selector:
                name: webeleData[key_param].prop.selector
                event: webeleData[key_param].prop.event
              tag:
                "text-decoration": valData
                transition: "all " + data.webele[key_res][key_webele].animation.time.val + "s ease-in-out"
            continue
          when "text-shadow"
            val = webeleData.x.val + "px " + webeleData.y.val + "px " + webeleData.shade.val + "px " + getColorVal(webeleData.color.val)
            if cssDataTemp.tag[name] == undefined
              cssDataTemp.tag[name] = val
            else
              cssDataTemp.tag[name] += "," + val
            continue
          when "box-shadow"
            val = webeleData.x.val + "px " + webeleData.y.val + "px " + webeleData.shade.val + "px " + webeleData.size.val + "px " + getColorVal(webeleData.color.val) + webeleData.inset.val
          when "transform"
            val = 
              "rotate3d(1,0,0," + webeleData.rotateX.val + "deg) " + 
              "rotate3d(0,1,0," + webeleData.rotateY.val + "deg) " + 
              "rotate3d(0,0,1," + webeleData.rotateZ.val + "deg) " + 
              "scale(" + webeleData.scale.val + ") " + 
              "skew(" + webeleData.skewX.val + "deg, " + webeleData.skewY.val+ "deg) " + 
              "translate(" + webeleData.translateX.val + "px, " + webeleData.translateY.val+ "px)"
          when "origin"
            val = webeleData.originX.val + "% " + webeleData.originY.val + "%"
          when "bgSize"
            switch webeleData.sizeX.val.unit
              when "auto", "contain", "cover"
                val = webeleData.sizeX.val.unit
              else
                val = webeleData.sizeX.val.num + webeleData.sizeX.val.unit + " " + 
                      webeleData.sizeY.val + webeleData.sizeX.val.unit

        cssDataTemp.tag[name] = val

  allCSS = ""
  cssData = {}
  tempCSSRulesNumber = cssRulesNumber
  for key_res in data.responsiveList
    if styleSheet.cssRules[tempCSSRulesNumber]
      styleSheet.deleteRule(tempCSSRulesNumber)
    if web.size.chooseResponsiveMax(key_res, data.responsiveMax) == key_res
      cssData.data1 = 
        media:
          type: "min-width"
          val: web.size.getResponsiveMinWidth(key_res)
        child: {}
      for key_webele in data.webeleList
        for animation in ["start", "end"]
          webeleData = data.webele[key_res][key_webele]
          cssData.data1.child[key_webele + "_" + animation] = 
            selector:
              name: ["[data-webele=\""+ key_webele + "\"]"]
              event:
                webeleData.animation.trigger.val if animation == "end"
            tag:
              transition: "all " + webeleData.animation.time.val + "s ease-in-out"
            child: {}
          for key_css, param_css of data.css
            if key_css != "animation"
              setCSSContents(cssData.data1.child[key_webele + "_" + animation],
                               key_css, webeleData[animation][key_css], param_css)

      cssStr = css.core.make(cssData)
      allCSS += cssStr
      styleSheet.insertRule(cssStr, tempCSSRulesNumber)
    tempCSSRulesNumber++

exports.generateCodes = () ->
  allCSS