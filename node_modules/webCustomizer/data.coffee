#==============================================================================
# define
#==============================================================================
debug = require("debug")
#require
core = require("core")
web = require("web")

#property
exports.name = "webele"
exports.eleList = web.data.getValues(@name)
exports.HSL = {H:0, S:50, L:50}
exports.colorList = {}
exports.webele = {}
exports.responsiveMax = "all"
exports.css = {
  responsive: ["all", "exSmall", "small", "middle" , "large"]
  animation: {
    name: "animation"
    state: ["start", "end", "all"]
    param: ["trigger", "time"]
    trigger: ["none", "hover", "active", "target", "focus", "checkd"]
  }
  color: {
    name: "color"
    param: ["BG", "text", "link", "hlink", "border", "shadow"]
  }
  border: {
    name: "border"
    param: ["style", "width", "radius"]
    section: ["all", "left", "top", "right", "bottom"]
    style: ["none", "hidden", "solid", "double", "groove", "ridge", "inset", "outset", "dashed", "dotted"]
  }
  shadow: {
    name: "shadow"
    param: ["x", "y", "shade", "size", "inset"]
  }
  font: {
    name: "font"
    param: ["align", "family", "size", "weight", "shadow1", "shadow2", "shadow3", "shadow4"]
    shadow: {
      param: ["x", "y", "shade", "color"]
    }
    align: ["left", "right", "center"]
    family: ["Andale Mono", "Arial", "Arial Black", "Comic Sans MS", "Courier", "FixedSys",
             "Georgia", "Helvetica", "Impact", "Lucida", "ＭＳ Ｐゴシック", "ＭＳ Ｐ明朝", "ＭＳ ゴシック", "ＭＳ 明朝",
             "MS UI Gothic", "Small Fonts", "Symbol", "System", "Terminal", "Times New Roman", "Trebuchet MS", "Verdana",
             "Webdings"]
  }
  space: {
    name: "space"
    param: ["margin", "padding"]
    val: ["val", "unit"]
    section: ["all", "left", "top", "right", "bottom"]
    unit: ["auto", "per", "px"]
  }
  size: {
    name: "size"
    param: ["width", "height"]
    val: ["val", "unit"]
    section: ["normal", "max", "min"]
    unit: ["auto", "per", "px", "none"]
  }
  opacity: {
    name: "opacity"
    param: ["opacity"]
  }
  position: {
    name: "position"
    param: ["position", "display", "overflow-x", "overflow-y", "z-index", "float", "clear", "top", "left", "right", "bottom"]
    position: ["static", "absolute", "relative", "fixed"]
    display: ["inline", "block", "list-item", "run-in", "inline-block", "table", "inline-table",
              "table-row-group", "table-header-group", "table-footer-group", "table-row", "table-column-group",
              "table-column", "table-cell", "table-caption", "none", "inherit"]
    float: ["none", "left", "right"]
    clear: ["none", "left", "right", "both"]
    display: ["inline", "block", "list-item", "run-in", "inline-block", "table", "inline-table",
              "table-row-group", "table-header-group", "table-footer-group", "table-row", "table-column-group",
              "table-column", "table-cell", "table-caption", "none", "inherit"]
    overflow: ["visible", "scroll", "hidden", "auto"]
    val: ["val", "unit"]
    unit: ["auto", "px", "per"]
  }
  transform: {
    name: "transform"
    param: ["rotateX", "rotateY", "rotateZ", "originX", "originY", "scale", "skewX", "skewY", "translateX", "translateY"]
  }
  gradient: {
    name: "gradient"
    param: ["direction", "percent", "color1", "color2", "color3"]
    color: ["color", "method"]
    direction: ["none", "left", "left top", "left bottom", "right", "right top", "right bottom", "top", "bottom", "circle"]
  }
  background: {
    name: "background"
    param: ["repeat", "attachment", "directionX", "x", "directionY", "y"]
    repeat: ["repeat", "repeat-x", "repeat-y", "no-repeat"]
    attachment: ["scroll", "fixed"]
    directionX: ["left", "right"]
    directionY: ["top", "bottom"]
    val: ["val", "unit"]
    unit: ["auto", "px", "per"]
  }
}

# color init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.color.name]] ,
  {
    BG: "white_normal"
    text: "black_normal"
    link: "blue_moreLight"
    hlink: "blue_moreDark"
    border: "black_normal"
    shadow: "black_normal"
  }
)
core.obj.setMapVal(@webele, [["BG"], @css.responsive, @css.animation.state, [@css.color.name]], {"BG":"base_normal"})
core.obj.setMapVal(@webele, [["footer", "header"], @css.responsive, @css.animation.state, [@css.color.name]],
  {
    BG: "black_normal"
    text: "white_normal"
  }
)

# border init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.border.name], @css.border.section],
  {
    style: "solid"
    width: 0
    radius: 0
  }
)

# shadow init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.shadow.name]],
  {
    x: 0
    y: 0
    shade: 0
    size: 0
    inset: 0
  }
)

# font init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.font.name]],
  { 
    align: "left"
    family: "Times New Roman"
    size: 15
    weight: 400
  }
)

for cnt in [1..4]
  core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.font.name], ["shadow" + cnt]],
    {
      x: 0
      y: 0
      shade: 0
      color: "black_normal"
    }
  )

# space init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.space.name], @css.space.section, @css.space.param],
  {
    val: 0
    unit: "px"
  }
)

# size init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.size.name], @css.size.section, @css.size.param],
  {
    val: 0
    unit: "none"
  }
)
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.size.name], ["normal"], ["width"]],
  {
    val: 100
    unit: "per"
  }
)
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.size.name], ["normal"], ["height"]],
  {
    val: 100
    unit: "auto"
  }
)

# opacity init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.opacity.name]],
  {
    opacity: 1.0
  }
)

# position init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.position.name]],
  {
    position: "static"
    display: "block"
    float: "none"
    clear: "none"
    "z-index": 1
    "overflow-x": "auto"
    "overflow-y": "auto"
  }
)
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.position.name], ["top", "bottom", "left", "right"]],
  {
    val: 0
    unit: "auto"
  }
)

# transform init
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.transform.name]],
  {
    rotateX: 0
    rotateY: 0
    rotateZ: 0
    originX: 50
    originY: 50
    scale: 1
    skewX: 0
    skewY: 0
    translateX: 0
    translateY: 0
  }
)

#gradient
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.gradient.name]],
  {
    direction: "none"
    percent: [33, 66]
  }
)
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.gradient.name], ["color1", "color2", "color3"]],
  {
    color: "base"
    method: "normal"
  }
)

#background
["repeat", "attachment", "directionX", "x", "directionY", "y"]
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.background.name]],
  {
    attachment: "scroll"
    directionX: "left"
    directionY: "top"
    repeat: "repeat"
  }
)
core.obj.setMapVal(@webele, [@eleList, @css.responsive, @css.animation.state, [@css.background.name], ["x", "y"]],
  {
    val: 0
    unit: "auto"
  }
)

#animation
core.obj.setMapVal(@webele, [@eleList, @css.responsive],
  {
    trigger: "none"
    time: 1
  }
)

#==============================================================================
# option
#==============================================================================
exports.option = {
  trans: {
    name: "trans"
    param: ["method", "time"]
    method: ["none", "fade", "ver_blind", "hor_blind", "clip", "drop_up", "drop_down", "drop_left", "drop_right", "ver_slide", "hor_slide", "fold", "puff_on", "puff_off"]
  }
}

exports.optionData = {}
core.obj.setMapVal(@optionData, [[@option.trans.name]],
  {
    time: 0
    method: "none"
  }
)

@optionData.trans.method = "none"

#==============================================================================
# pv method
#==============================================================================
getPageCookieName = () ->
  strList = location.href.split("/")
  strList[strList.length-1].split(".")[0] + @name
  
getJsonData = () =>
  {
    webele: @webele
    HSL: @HSL
    optionData: @optionData
    responsiveMax: @responsiveMax  
  }

setLocalData = () =>
  setJSONData = (data) =>
    @webele = data.webele
    @HSL = data.HSL
    @optionData = data.optionData
    @responsiveMax = data.responsiveMax
    
  jsonLoadEvent = (data) =>
    setJSONData(data)
    ctr_colorScheme = require("./ctr/colorScheme")
    ctr_css = require("./ctr/css")
    ctr_option = require("./ctr/option")
    ctr_colorScheme.init()
    ctr_css.init()
    ctr_option.init()
  
  if localStorage.getItem(getPageCookieName())
    setJSONData(JSON.parse(localStorage.getItem(getPageCookieName())))
  else if localStorage.getItem(@name)
    setJSONData(JSON.parse(localStorage.getItem(@name)))
  else
    core.file.getJSONFile("./src/webCustomizer/" + getPageCookieName() + "webele.json", jsonLoadEvent)

#==============================================================================
# ex method
#==============================================================================
exports.setCookie_G = () ->
  localStorage.setItem(@name, JSON.stringify(getJsonData()))

exports.clearCookie_G = () ->
  localStorage.removeItem(@name)

exports.setCookie = () ->
  localStorage.setItem(getPageCookieName(), JSON.stringify(getJsonData()))

exports.clearCookie = () ->
  localStorage.removeItem(getPageCookieName())

exports.saveAsFile = () ->
  core.file.downloadData(JSON.stringify(getJsonData()), getPageCookieName() + ".json")

#==============================================================================
# main
#==============================================================================
setLocalData()