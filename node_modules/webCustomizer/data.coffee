debug = require("debug")
core = require("core")
web = require("web")

exports.name = "webele"
exports.webeleList = web.data.getValues(@name)

exports.HSL = {H:0, S:50, L:50}
exports.colorList = web.color.getColorList(@HSL)

exports.responsiveMax = "small"
exports.responsiveList = ["exSmall", "small", "middle" , "large"]
exports.animationState = ["start", "end"]

exports.webele = {}
exports.css =
  animation:
    trigger:
      gui: "select"
      val: "none"
      select: ["none", "hover", "active", "target", "focus", "checkd"]
    time:
      gui: "slider"
      val: 0
      range:
        max: 100
        min: 0
        step: 0.01
  background:
    color:
      gui: "color"
      val:
        color: "white"
        tone: "normal"
      prop:
        name: "background-color"
        type: "color"
    backgroundImage:
      child: ["backgroundImage"]
      prop:
        name: "background-image"
      image:
        gui: "select"
        val: "none.png"
        select: debug.data.imageList
        prop:
          type: "bgImage"
          path: "../../src/img/imageList/"
      direction:
        gui: "select"
        val: "none"
        select: ["none", "left", "left top", "left bottom", "right", "right top", "right bottom", "top", "bottom", "circle"]
      percent:
        gui: "sliderRange"
        val: 
          first: 33
          second: 66
        range:
          max: 100
          min: 0
          step: 1
      color1:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
      color2:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
      color3:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
    sizeX:
      gui: "sliderWithInput"
      val:
        num: 0
        unit: "auto"
        unitType: ["auto", "contain", "cover", "px", "%"]
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "bgSize"
        name: "background-size"
    sizeY:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
    repeat:
      gui: "select"
      val: "repeat"
      select: ["repeat", "repeat-x", "repeat-y", "no-repeat"]
      prop:
        name: "background-repeat"
        type: "val"
    attachment:
      gui: "select"
      val: "scroll"
      select: ["scroll", "fixed"]
      prop:
        name: "background-attachment"
        type: "val"
    position:
      child: ["position"]
      prop:
        name: "background-position"
      directionX:
        gui: "select"
        val: "left"
        select: ["left", "right"]
        prop:
          type: "position"
      x:
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "auto"
          unitType: ["auto", "px", "%"]
        range:
          max: 2000
          min: -2000
          step: 1
      directionY:
        gui: "select"
        val: "top"
        select: ["top", "bottom"]
      y:
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "auto"
          unitType: ["auto", "px", "%"]
        range:
          max: 2000
          min: -2000
          step: 1
  border:
    border:
      child: ["all", "left", "top", "right", "bottom"]
      prop:
        headerName: "border"
      width:
        gui: "slider"
        val: "0"
        range:
          max: 1000
          min: 0
          step: 1
        prop:
          type: "border"
      style:
        gui: "select"
        val: "solid"
        select: ["none", "hidden", "solid", "double", "groove", "ridge", "inset", "outset", "dashed", "dotted"]
      color:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
  borderRadius:
    radius:
      child: ["radius"]
      prop:
        name: "border-radius"
      "all":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
      "topLeft":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
        prop:
          type: "radius"
      "topRight":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
      "bottomLeft":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
      "bottomRight":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
  font:
    family:
      gui: "select"
      val: "Times New Roman"
      select: ["Andale Mono", "Arial", "Arial Black", "Comic Sans MS", "Courier", "FixedSys",
               "Georgia", "Helvetica", "Impact", "Lucida", "ＭＳ Ｐゴシック", "ＭＳ Ｐ明朝", "ＭＳ ゴシック", "ＭＳ 明朝",
               "MS UI Gothic", "Small Fonts", "Symbol", "System", "Terminal", "Times New Roman", "Trebuchet MS", "Verdana",
               "Webdings"]
      prop:
        type: "val"
        name: "font-family"
        suffix: " !important;\n"
    size:
      gui: "slider"
      val: 15
      range:
        max: 100
        min: 0
        step: 1
      prop:
        type: "px"
        name: "font-size"
    lineHeight:
      gui: "sliderWithInput"
      val:
        num: 20
        unit: "normal"
        unitType: ["normal", "%", "px", "%"]
      range:
        max: 1000
        min: 0
        step: 1
      prop:
        type: "unitVal"
        name: "line-height"
    weight:
      gui: "slider"
      val: 400
      range:
        max: 900
        min: 100
        step: 100
      prop:
        type: "val"
        name: "font-weight"
    fontColor:
      gui: "color"
      val:
        color: "black"
        tone: "normal"
      prop:
        type: "color"
        name: "color"
    linkColor:
      gui: "color"
      val:
        color: "blue"
        tone: "moreLight"
      prop:
        type: "linkColor"
        selector: ["a", "i"]
        name: "color"
    hlinkColor:
      gui: "color"
      val:
        color: "blue"
        tone: "moreDark"
      prop:
        type: "linkColor"
        selector: ["a", "i"]
        event: "hover"
        name: "color"
    align:
      gui: "select"
      val: "left"
      select: ["left", "right", "center"]
      prop:
        type: "val"
        name: "text-align"
    decoration:
      gui: "select"
      val: "none"
      select: ["none", "underline", "overline", "line-through", "blink"]
      prop:
        type: "val"
        name: "text-decoration"
    hdecoration:
      gui: "select"
      val: "none"
      select: ["none", "underline", "overline", "line-through", "blink"]
      prop:
        type: "hdecoretion"
        name: "text-decoration"
        selector: ["a"]
        event: "hover"
    shadow:
      child: ["shadow1", "shadow2", "shadow3", "shadow4"]
      prop:
        name: "text-shadow"
      x: 
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "text-shadow"
      y:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
      shade:
        gui: "slider"
        val: 0
        range:
          max: 100
          min: 0
          step: 1
      color:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
  opacity:
    opacity:
      gui: "slider"
      val: 1.0
      range:
        max: 1
        min: 0
        step: 0.01
      prop:
        type: "val"
        name: "opacity"
  position:
    position:
      gui: "select"
      val: "static"
      select: ["static", "absolute", "relative", "fixed"]
      prop:
        type: "val"
        name: "position"
    display:
      gui: "select"
      val: "block"
      select: ["inline", "block", "list-item", "run-in", "inline-block", "table", "inline-table",
                "table-row-group", "table-header-group", "table-footer-group", "table-row", "table-column-group",
                "table-column", "table-cell", "table-caption", "none", "inherit"]
      prop:
        type: "val"
        name: "display"
    "overflowX":
      gui: "select"
      val: "auto"
      select: ["visible", "scroll", "hidden", "auto"]
      prop:
        type: "val"
        name: "overflow-x"
    "overflowY":
      gui: "select"
      val: "auto"
      select: ["visible", "scroll", "hidden", "auto"]
      prop:
        type: "val"
        name: "overflow-y"
    "zIndex":
      gui: "slider"
      val: 1
      range:
        max: 1000
        min: -1000
        step: 1
      prop:
        type: "val"
        name: "z-index"
    float:
      gui: "select"
      val: "none"
      select: ["none", "left", "right"]
      prop:
        type: "val"
        name: "float"
    clear:
      gui: "select"
      val: "none"
      select: ["none", "left", "right", "both"]
      prop:
        type: "val"
        name: "clear"
    top:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "px"
        name: "top"
    left:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "px"
        name: "left"
    bottom:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "px"
        name: "bottom"
    right:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "px"
        name: "right"
  shadow:
    shadow:
      child: ["shadow"]
      prop:
        name: "box-shadow"
      x:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "box-shadow"
      y:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
      shade:
        gui: "slider"
        val: 0
        range:
          max: 500
          min: 0
          step: 1
      size:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
      color:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
      inset:
        gui: "select"
        val: ""
        select: ["", "inset"]
  size:
    size:
      child: ["normal", "max", "min"]
      prop:
        type: "container"
      width:
        gui: "sliderWithInput"
        val:
          num: 100
          unit: "auto"
          unitType: ["auto", "%", "px", "none"]
        range:
          max: 2000
          min: 0
          step: 1
        prop:
          type: "unitVal"
          name: "width"
          namePrefix: "key"
      height:
        gui: "sliderWithInput"
        val:
          num: 100
          unit: "auto"
          unitType: ["auto", "%", "px", "none"]
        range:
          max: 2000
          min: 0
          step: 1
        prop:
          type: "unitVal"
          name: "height"
          namePrefix: "key"
  space:
    space:
      child:["all", "left", "top", "right", "bottom"]
      prop:
        type: "space"
      margin: 
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "px"
          unitType: ["auto", "%", "px"]
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "unitVal"
          name: "margin"
          namesuffix: "key"
      padding:
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "px"
          unitType: ["auto", "%", "px"]
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "unitVal"
          name: "padding"
          namesuffix: "key"
  transform:
    transform:
      child:["transform"]
      prop:
        name: "transform"
        suffix: ";\n"
        vender: true
      rotateX:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
        prop:
          type: "transform"
      rotateY:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
      rotateZ:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
      scale:
        gui: "slider"
        val: 1.0
        range:
          max: 10
          min: 0
          step: 0.01
      skewX:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
      skewY:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
      translateX:
        gui: "slider"
        val: 0
        range:
          max: 2000
          min: -2000
          step: 1
      translateY:
        gui: "slider"
        val: 0
        range:
          max: 2000
          min: -2000
          step: 1
    origin:
      child:["origin"]
      prop:
        name: "transform-origin"
      originX:
        gui: "slider"
        val: 50
        range:
          max: 100
          min: 0
          step: 1
        prop:
          type: "origin"
      originY:
        gui: "slider"
        val: 50
        range:
          max: 100
          min: 0
          step: 1
          
#==============================================================================
# setWebele
#==============================================================================
setData = (data, map, option) =>
  mapVal = {}
  for key, param of option
    if param.child
      map.push param.child
      setData(data, map, param)
    else
      if key != "child" && param.val != undefined
        mapVal[key] = param
  core.obj.setMapVal(data, map, mapVal)
  map.pop()

for key, css of @css
  map = [@responsiveList, @webeleList]
  if key != "animation"
    map.push @animationState
  map.push [key]
  setData(@webele, map, css)

#==============================================================================
# option
#==============================================================================
exports.optionData = {}
exports.option =
  trans:
    time:
      gui: "slider"
      val: 0
      range:
        max: 10000
        min: 0
        step: 100
    method:
      gui: "select"
      val: "none"
      select: ["none", "fade", "ver_blind", "hor_blind", "clip", "drop_up", "drop_down", "drop_left", "drop_right", "ver_slide", "hor_slide", "fold", "puff_on", "puff_off"]

for key, option of @option
  setData(@optionData, [["trans"]], option)
#console.log @optionData
#==============================================================================
# pv method
#==============================================================================
getPageCookieName = () ->
  strList = location.href.split("/")
  strList[strList.length-1].split(".")[0] + @name
  
getJsonData = () =>
  {
    webele        : @webele
    HSL           : @HSL
    optionData    : @optionData
    responsiveMax : @responsiveMax  
  }

setLocalData = () =>
  setJSONData = (data) =>
    core.obj.marge(@webele, data.webele)
    @HSL           = data.HSL
    @optionData    = data.optionData
    @responsiveMax = data.responsiveMax
    
  jsonLoadEvent = (data) =>
    setJSONData(data)
    ctr = require("./ctr")
    ctr.init()
  
  if localStorage.getItem(getPageCookieName())
    setJSONData(JSON.parse(localStorage.getItem(getPageCookieName())))
  else if localStorage.getItem(@name)
    setJSONData(JSON.parse(localStorage.getItem(@name)))
  else
    core.file.getJSONFile("./src/webCustomizer/" + getPageCookieName() + ".json", jsonLoadEvent)
    
#==============================================================================
# ex method
#==============================================================================
exports.setCookie_G = () ->
  localStorage.setItem(@name, JSON.stringify(getJsonData()))

exports.clearCookie_G = () ->
  localStorage.removeItem(@name)

exports.setCookie = () ->
  localStorage.setItem(getPageCookieName(), JSON.stringify(getJsonData()))

exports.clearCookie = () ->
  localStorage.removeItem(getPageCookieName())

exports.saveAsFile = () ->
  core.file.downloadData(JSON.stringify(getJsonData()), getPageCookieName() + ".json")

#==============================================================================
# main
#==============================================================================
setLocalData()