#==============================================================================
# define
#==============================================================================
debug = require("debug")
core = require("core")
web = require("web")

#property
exports.name = "webele"
exports.webeleList = web.data.getValues(@name)

exports.HSL = {H:0, S:50, L:50}
exports.colorList = web.color.getColorList(@HSL)

exports.responsiveMax = "large"
exports.responsiveList = ["exSmall", "small", "middle" , "large"]
exports.animationState = ["start", "end", "all"]

exports.webele = {}
exports.css =
  animation:
    trigger:
      gui: "select"
      val: "none"
      select: ["none", "hover", "active", "target", "focus", "checkd"]
    time:
      gui: "slider"
      val: 0
      range:
        max: 100
        min: 0
        step: 0.01
  background:
    color:
      gui: "color"
      val:
        color: "white"
        tone: "normal"
      prop:
        name: "background-color"
        type: "color"
    backgroundImage:
      child: ["backgroundImage"]
      prop:
        type: "container"
        name: "background-image"
        suffix: ""
      image:
        gui: "select"
        val: "none.png"
        select: debug.data.imageList
        prop:
          type: "path"
          path: "../../src/img/imageList/"
          prefix: "url("
          suffix: ")"
      direction:
        gui: "select"
        val: "none"
        select: ["none", "left", "left top", "left bottom", "right", "right top", "right bottom", "top", "bottom", "circle"]
        prop:
          type: "gradient"
      percent:
        gui: "sliderRange"
        val: 
          first: 33
          second: 66
        range:
          max: 100
          min: 0
          step: 1
      color1:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
      color2:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
      color3:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
    repeat:
      gui: "select"
      val: "repeat"
      select: ["repeat", "repeat-x", "repeat-y", "no-repeat"]
      prop:
        name: "background-repeat"
        type: "val"
    attachment:
      gui: "select"
      val: "scroll"
      select: ["scroll", "fixed"]
      prop:
        name: "background-attachment"
        type: "val"
    position:
      child: ["position"]
      prop:
        name: "background-position"
        type: "container"
        suffix: ";\n"
      directionX:
        gui: "select"
        val: "left"
        select: ["left", "right"]
        prop:
          type: "val"
          suffix: " "
      x:
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "auto"
          unitType: ["auto", "px", "%"]
        range:
          max: 2000
          min: -2000
          step: 1
        prop:
          type: "unitVal"
          suffix: " "
      directionY:
        gui: "select"
        val: "top"
        select: ["top", "bottom"]
        prop:
          type: "val"
          suffix: " "
      y:
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "auto"
          unitType: ["auto", "px", "%"]
        range:
          max: 2000
          min: -2000
          step: 1
        prop:
          type: "unitVal"
          suffix: ""
  border:
    border:
      child: ["all", "left", "top", "right", "bottom"]
      prop:
        type: "direction"
        headerName: "border"
        suffix: ""
      width:
        gui: "slider"
        val: "0"
        range:
          max: 1000
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px "
      style:
        gui: "select"
        val: "solid"
        select: ["none", "hidden", "solid", "double", "groove", "ridge", "inset", "outset", "dashed", "dotted"]
        prop:
          type: "val"
          suffix: " "
      color:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
        prop:
          type: "color"
  borderRadius:
    radius:
      child: ["radius"]
      prop:
        type: "container"
        name: "border-radius"
        suffix: ";\n"
      "all":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
      "topLeft":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px "
      "topRight":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px "
      "bottomLeft":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px "
      "bottomRight":
        gui: "slider"
        val: "0"
        range:
          max: 500
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px"
  font:
    family:
      gui: "select"
      val: "Times New Roman"
      select: ["Andale Mono", "Arial", "Arial Black", "Comic Sans MS", "Courier", "FixedSys",
               "Georgia", "Helvetica", "Impact", "Lucida", "ＭＳ Ｐゴシック", "ＭＳ Ｐ明朝", "ＭＳ ゴシック", "ＭＳ 明朝",
               "MS UI Gothic", "Small Fonts", "Symbol", "System", "Terminal", "Times New Roman", "Trebuchet MS", "Verdana",
               "Webdings"]
      prop:
        type: "val"
        name: "font-family"
        suffix: " !important;\n"
    size:
      gui: "slider"
      val: 15
      range:
        max: 100
        min: 0
        step: 1
      prop:
        type: "val"
        name: "font-size"
        suffix: "px;\n"
    weight:
      gui: "slider"
      val: 400
      range:
        max: 900
        min: 100
        step: 100
      prop:
        type: "val"
        name: "font-weight"
    fontColor:
      gui: "color"
      val:
        color: "black"
        tone: "normal"
      prop:
        type: "color"
        name: "color"
    linkColor:
      gui: "color"
      val:
        color: "blue"
        tone: "moreLight"
      prop:
        type: "color"
        selector: "a, i"
        name: "color"
        suffix: " !important;\n"
    hlinkColor:
      gui: "color"
      val:
        color: "blue"
        tone: "moreDark"
      prop:
        type: "color"
        selector: "a:hover, i:hover"
        name: "color"
        suffix: " !important;\n"
    align:
      gui: "select"
      val: "left"
      select: ["left", "right", "center"]
      prop:
        type: "val"
        name: "text-align"
    shadow:
      child: ["shadow1", "shadow2", "shadow3", "shadow4"]
      prop:
        type: "container"
        name: "text-shadow"
        suffix: "0px 0px 0px #000000;\n"
      x: 
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "val"
          suffix: "px "
      y:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "val"
          suffix: "px "
      shade:
        gui: "slider"
        val: 0
        range:
          max: 100
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px "
      color:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
        prop:
          type: "color"
          suffix: ", "
  opacity:
    opacity:
      gui: "slider"
      val: 1.0
      range:
        max: 1
        min: 0
        step: 0.01
      prop:
        type: "val"
        name: "opacity"
  position:
    position:
      gui: "select"
      val: "static"
      select: ["static", "absolute", "relative", "fixed"]
      prop:
        type: "val"
        name: "position"
    display:
      gui: "select"
      val: "block"
      select: ["inline", "block", "list-item", "run-in", "inline-block", "table", "inline-table",
                "table-row-group", "table-header-group", "table-footer-group", "table-row", "table-column-group",
                "table-column", "table-cell", "table-caption", "none", "inherit"]
      prop:
        type: "val"
        name: "display"
    "overflowX":
      gui: "select"
      val: "auto"
      select: ["visible", "scroll", "hidden", "auto"]
      prop:
        type: "val"
        name: "overflow-x"
    "overflowY":
      gui: "select"
      val: "auto"
      select: ["visible", "scroll", "hidden", "auto"]
      prop:
        type: "val"
        name: "overflow-y"
    "zIndex":
      gui: "slider"
      val: 1
      range:
        max: 1000
        min: -1000
        step: 1
      prop:
        type: "val"
        name: "z-index"
    float:
      gui: "select"
      val: "none"
      select: ["none", "left", "right"]
      prop:
        type: "val"
        name: "float"
    clear:
      gui: "select"
      val: "none"
      select: ["none", "left", "right", "both"]
      prop:
        type: "val"
        name: "clear"
    top:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "val"
        name: "top"
        suffix: "px;\n"
    left:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "val"
        name: "left"
        suffix: "px;\n"
    bottom:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "val"
        name: "bottom"
        suffix: "px;\n"
    right:
      gui: "slider"
      val: 0
      range:
        max: 2000
        min: -2000
        step: 1
      prop:
        type: "val"
        name: "right"
        suffix: "px;\n"
  shadow:
    shadow:
      child: ["shadow"]
      prop:
        type: "container"
        name: "box-shadow"
        suffix: ";\n"
      x:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "val"
          suffix: "px "
      y:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "val"
          suffix: "px "
      shade:
        gui: "slider"
        val: 0
        range:
          max: 500
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "px "
      size:
        gui: "slider"
        val: 0
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "val"
          suffix: "px "
      color:
        gui: "color"
        val:
          color: "black"
          tone: "normal"
        prop:
          type: "color"
          suffix: " "
      inset:
        gui: "select"
        val: ""
        select: ["", "inset"]
        prop:
          type: "val"
          suffix: ""
  size:
    size:
      child: ["normal", "max", "min"]
      prop:
        type: "container"
        suffix: ""
      width:
        gui: "sliderWithInput"
        val:
          num: 100
          unit: "auto"
          unitType: ["auto", "%", "px", "none"]
        range:
          max: 2000
          min: 0
          step: 1
        prop:
          type: "unitVal"
          name: "width"
          namePrefix: "key"
      height:
        gui: "sliderWithInput"
        val:
          num: 100
          unit: "auto"
          unitType: ["auto", "%", "px", "none"]
        range:
          max: 2000
          min: 0
          step: 1
        prop:
          type: "unitVal"
          name: "height"
          namePrefix: "key"
  space:
    space:
      child:["all", "left", "top", "right", "bottom"]
      prop:
        type: "space"
        suffix: ""
      margin: 
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "auto"
          unitType: ["auto", "%", "px"]
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "unitVal"
          name: "margin"
          namesuffix: "key"
      padding:
        gui: "sliderWithInput"
        val:
          num: 0
          unit: "auto"
          unitType: ["auto", "%", "px"]
        range:
          max: 1000
          min: -1000
          step: 1
        prop:
          type: "unitVal"
          name: "padding"
          namesuffix: "key"
  transform:
    transform:
      child:["transform"]
      prop:
        name: "transform"
        suffix: ";\n"
        vender: true
      rotateX:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
        prop:
          type: "val"
          prefix: "rotate3d(1,0,0,"
          suffix: "deg) "
      rotateY:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
        prop:
          type: "val"
          prefix: "rotate3d(0,1,0,"
          suffix: "deg) "
      rotateZ:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
        prop:
          type: "val"
          prefix: "rotate3d(0,0,1,"
          suffix: "deg) "
      scale:
        gui: "slider"
        val: 1.0
        range:
          max: 10
          min: 0
          step: 0.01
        prop:
          type: "val"
          prefix: "scale("
          suffix: ") "
      skewX:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
        prop:
          type: "val"
          prefix: "skew("
          suffix: "deg, "
      skewY:
        gui: "slider"
        val: 0
        range:
          max: 180
          min: -180
          step: 1
        prop:
          type: "val"
          suffix: "deg) "
      translateX:
        gui: "slider"
        val: 0
        range:
          max: 2000
          min: -2000
          step: 1
        prop:
          type: "val"
          prefix: "translate("
          suffix: "px, "
      translateY:
        gui: "slider"
        val: 0
        range:
          max: 2000
          min: -2000
          step: 1
        prop:
          type: "val"
          suffix: "px)"
    origin:
      child:["origin"]
      prop:
        name: "transform-origin"
        vender: true
        suffix: ";\n"
      originX:
        gui: "slider"
        val: 50
        range:
          max: 100
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "% "
      originY:
        gui: "slider"
        val: 50
        range:
          max: 100
          min: 0
          step: 1
        prop:
          type: "val"
          suffix: "%"
#==============================================================================
# setWebele
#==============================================================================
setWebele = (map, css) =>
  mapVal = {}
  for key, param of css
    if param.child
      map.push param.child
      setWebele(map, param)
    else
      if key != "child" && param.val != undefined
        mapVal[key] = param
  core.obj.setMapVal(@webele, map, mapVal)
  map.pop()
debug.test.startTimer("webeleTest")
for key, css of @css
  map = [@responsiveList, @webeleList]
  if key != "animation"
    map.push @animationState
  map.push [key]
  setWebele(map, css)
debug.test.endTimer("webeleTest")

console.log @webele
#==============================================================================
# option
#==============================================================================
exports.optionData = {}
exports.option =
  trans:
    time:
      gui: "slider"
      val: 0
    method:
      gui: "select"
      val: "none"
      select: ["none", "fade", "ver_blind", "hor_blind", "clip", "drop_up", "drop_down", "drop_left", "drop_right", "ver_slide", "hor_slide", "fold", "puff_on", "puff_off"]

mapVal = {}
for key, css of @option
  for key, param of css
    mapVal[key] = param.val
core.obj.setMapVal(@optionData, [["trans"]], mapVal)

#==============================================================================
# pv method
#==============================================================================
getPageCookieName = () ->
  strList = location.href.split("/")
  strList[strList.length-1].split(".")[0] + @name
  
getJsonData = () =>
  {
    webele        : @webele
    HSL           : @HSL
    optionData    : @optionData
    responsiveMax : @responsiveMax  
  }

setLocalData = () =>
  setJSONData = (data) =>
    @webele        = data.webele
    @HSL           = data.HSL
    @optionData    = data.optionData
    @responsiveMax = data.responsiveMax
    
  jsonLoadEvent = (data) =>
    setJSONData(data)
    ctr_colorScheme = require("./ctr/colorScheme")
    ctr_css         = require("./ctr/css")
    ctr_option      = require("./ctr/option")
    ctr_colorScheme.init()
    ctr_css.init()
    ctr_option.init()
  
  if localStorage.getItem(getPageCookieName())
    setJSONData(JSON.parse(localStorage.getItem(getPageCookieName())))
  else if localStorage.getItem(@name)
    setJSONData(JSON.parse(localStorage.getItem(@name)))
  else
    core.file.getJSONFile("./src/webCustomizer/" + getPageCookieName() + "webele.json", jsonLoadEvent)
    
#==============================================================================
# ex method
#==============================================================================
exports.setCookie_G = () ->
  localStorage.setItem(@name, JSON.stringify(getJsonData()))

exports.clearCookie_G = () ->
  localStorage.removeItem(@name)

exports.setCookie = () ->
  localStorage.setItem(getPageCookieName(), JSON.stringify(getJsonData()))

exports.clearCookie = () ->
  localStorage.removeItem(getPageCookieName())

exports.saveAsFile = () ->
  core.file.downloadData(JSON.stringify(getJsonData()), getPageCookieName() + ".json")

#==============================================================================
# main
#==============================================================================
#setLocalData()