#==============================================================================
# require
#==============================================================================
core = require("core")
web = require("web")
data = require('../data')
ctr_colorScheme = require("./colorScheme")

#==============================================================================
# define
#==============================================================================
webeleName = "BG"
responsiveName = web.size.getInnerWidthName()
responsiveSelect = "all"
animationSelect = "start"

#==============================================================================
# interface
#==============================================================================
exports.init = () ->
  initSlider()
  initEvent()
  for key in data.eleList
    webeleName = key
    setCSS()
  webeleName = "BG"
  setData()
  $(window).trigger("resize")
  
setCSS = () =>
  ctr_colorScheme.setColorScheme(webeleName)
  setCSSBorder(webeleName)
  setCSSShadow(webeleName)
  setCSSOpacity()
  setCSSFont(webeleName)
  setCSSSpace()
  setCSSSize()
  setCSSPosition()
  setCSSTransform()
  setCSSGradient()
  setCSSBackground()
  setCSSAnimation(webeleName)
  
#============================================================================
# event
#============================================================================
$('*').bind 'contextmenu', (e) =>
  if $(e.currentTarget).data(data.name)
    webeleName = $(e.currentTarget).data(data.name)
  else
    webeleName = $(e.currentTarget).parents("[data-" + data.name + "]").data(data.name)
  setData()
  false

getResponsiveMax = (resName) ->
  getVal = (name) ->
    val = 0
    switch name
      when "exSmall"
        val = 0
      when "small"
        val = 1
      when "middle"
        val = 2
      when "large"
        val = 3
      when "all"
        val = 4
    val
  nowResVal = getVal(resName)
  maxResVal = getVal(data.responsiveMax)
  if nowResVal > maxResVal
    return data.responsiveMax
  resName

$(window).resize (e) =>
  responsiveName = getResponsiveMax(web.size.getInnerWidthName())
  nowWebele = webeleName
  for key in data.eleList
    webeleName = key
    setCSS()
  webeleName = nowWebele

setAllData = () =>
  if animationSelect == "all"
    for key_state in data.css.animation.state
      data.webele[webeleName][responsiveSelect][key_state] = $.extend(true, {}, data.webele[webeleName][responsiveSelect].all)
  if responsiveSelect == "all"
    for key_res in data.css.responsive
      data.webele[webeleName][key_res] = $.extend(true, {}, data.webele[webeleName].all)      
    
initEvent = () =>
  $("#animationState_select").change (e) =>
    animationSelect = $(e.currentTarget).val()
    setData()
    $(window).trigger("resize")

  $("#responsive_select").change (e) =>
    responsiveSelect = $(e.currentTarget).val()
    setData()
    $(window).trigger("resize")
  
  $("#responsiveMax_select").change (e) =>
    data.responsiveMax = $(e.currentTarget).val()
    setData()
    $(window).trigger("resize")
  
  #----------------------------------------------------------------------------
  # colorSelect
  #----------------------------------------------------------------------------
  $(".colorSetter select").change (e) =>
    setColorValFromUI = (id, val, isSelect) ->
      key_param = id.split("_")[0]
      data.webele[webeleName][responsiveSelect][animationSelect].color[key_param] = $("#" + key_param + "_" + "selectColor").val() + "_" + $("#" + key_param + "_" + "selectColorMethod").val()
    setColorValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), true)
    setAllData()
    $('#colorInput_debug').trigger("change")
  
  #----------------------------------------------------------------------------
  # border
  #----------------------------------------------------------------------------
  $(".borderSetter select").change (e) =>
    setBorderValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    setAllData()
    setCSSBorder(webeleName)
    
  $(".borderRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setBorderValFromUI($(e.currentTarget).attr("id"), ui.value)
    setAllData()
    setCSSBorder(webeleName)
    
  $('.borderRangeText').bind 'change', (e) =>
    setBorderValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.borderRange').trigger("slide")

  #----------------------------------------------------------------------------
  # shadow
  #----------------------------------------------------------------------------
  $(".shadowRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setSliderValFromUI($(e.currentTarget).attr("id"), ui.value, data.webele[webeleName][responsiveSelect][animationSelect].shadow)
    setAllData()
    setCSSShadow(webeleName)
    
  $('.shadowRangeText').bind 'change', (e) =>
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    setSliderValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), data.webele[webeleName][responsiveSelect][animationSelect].shadow)
    $('.shadowRange').trigger("slide")

  #----------------------------------------------------------------------------
  # transform
  #----------------------------------------------------------------------------
  $(".transformRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setSliderValFromUI($(e.currentTarget).attr("id"), ui.value, data.webele[webeleName][responsiveSelect][animationSelect].transform)
    setAllData()
    setCSSTransform(webeleName)
    
  $('.transformRangeText').bind 'change', (e) =>
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    setSliderValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), data.webele[webeleName][responsiveSelect][animationSelect].transform)
    $('.transformRange').trigger("slide")
    
  #----------------------------------------------------------------------------
  # opacity
  #----------------------------------------------------------------------------
  $(".opacityRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setSliderValFromUI($(e.currentTarget).attr("id"), ui.value, data.webele[webeleName][responsiveSelect][animationSelect].opacity)
    setAllData()
    setCSSOpacity()
    
  $('.opacityRangeText').bind 'change', (e) =>
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    setSliderValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), data.webele[webeleName][responsiveSelect][animationSelect].opacity)
    $('.opacityRange').trigger("slide")

  #----------------------------------------------------------------------------
  # font
  #----------------------------------------------------------------------------
  $(".fontSetter select").change (e) =>
    if $(e.currentTarget).attr("id").indexOf("color_font") != -1
      idStr = $(e.currentTarget).attr("id").split("_")
      id = idStr[0] + "_" + idStr[1] + "_" + idStr[2]
      setFontValFromUI($(e.currentTarget).attr("id"), $("#" + id + "_selectBaseColor").val() + "_" + $("#" + id + "_selectSideColor").val())
    else
      setFontValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    setAllData()
    setCSSFont(webeleName)
    
  $(".fontRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setFontValFromUI($(e.currentTarget).attr("id"), ui.value)
    setAllData()
    setCSSFont(webeleName)
    
  $('.fontRangeText').bind 'change', (e) =>
    setFontValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.fontRange').trigger("slide")

  #----------------------------------------------------------------------------
  # space
  #----------------------------------------------------------------------------
  $(".spaceSetter select").change (e) =>
    setSpaceValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), true)
    setAllData()
    setCSSSpace()
    
  $(".spaceRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setSpaceValFromUI($(e.currentTarget).attr("id"), ui.value)
    setAllData()
    setCSSSpace()
    
  $('.spaceRangeText').bind 'change', (e) =>
    setSpaceValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.spaceRange').trigger("slide")

  #----------------------------------------------------------------------------
  # size
  #----------------------------------------------------------------------------
  $(".sizeSetter select").change (e) =>
    setSizeValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), true)
    setAllData()
    setCSSSize()
    
  $(".sizeRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setSizeValFromUI($(e.currentTarget).attr("id"), ui.value)
    setAllData()
    setCSSSize()
    
  $('.sizeRangeText').bind 'change', (e) =>
    setSizeValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.sizeRange').trigger("slide")

  #----------------------------------------------------------------------------
  # position
  #----------------------------------------------------------------------------
  $(".positionSetter select").change (e) =>
    setPositionValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), true)
    setAllData()
    setCSSPosition()

  $(".positionRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setPositionValFromUI($(e.currentTarget).attr("id"), ui.value)
    setAllData()
    setCSSPosition()
    
  $('.positionText').bind 'change', (e) =>
    setPositionValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.positionRange').trigger("slide")

  #----------------------------------------------------------------------------
  # gradient
  #----------------------------------------------------------------------------
  $(".gradientSetter select").change (e) =>
    id = $(e.currentTarget).attr("id")
    val = $(e.currentTarget).val()    
    key_param = id.split("_")[0]
    key_color = id.split("_")[2]
    if key_color == "selectColor"
      data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param].color = val
    else if key_color == "selectColorMethod"
      data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param].method = val
    else 
      data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param] = val
    setAllData()
    setCSSGradient()
  
  $(".gradientRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.values)
      id = $(e.currentTarget).attr("id")
      key_param = id.split("_")[0]
      data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param] = ui.values
    setAllData()
    setCSSGradient()
    
  $('.gradientRangeText').bind 'change', (e) =>
    id = $(e.currentTarget).attr("id")
    key_param = id.split("_")[0]
    data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param] = $(e.currentTarget).val().split(",")
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(values: $(e.currentTarget).val().split(","))
    $('.gradientRange').trigger("slide")

  #----------------------------------------------------------------------------
  # background
  #----------------------------------------------------------------------------
  $(".backgroundSetter select").change (e) =>
    setBackgroundValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val(), true)
    setAllData()
    setCSSBackground()

  $(".backgroundRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      setBackgroundValFromUI($(e.currentTarget).attr("id"), ui.value)
    setAllData()
    setCSSBackground()
    
  $('.backgroundText').bind 'change', (e) =>
    setPositionValFromUI($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.backgroundRange').trigger("slide")

  #----------------------------------------------------------------------------
  # animation
  #----------------------------------------------------------------------------
  $(".animationSetter select").change (e) =>
    id = $(e.currentTarget).attr("id")
    key_param = id.split("_")[0]
    data.webele[webeleName][responsiveSelect][key_param] = $(e.currentTarget).val()
    setAllData()
    setCSSAnimation(webeleName)
  
  $(".animationRange").bind 'slide', (e, ui) =>
    if ui != undefined
      $("#" + $(e.currentTarget).attr('id') + "Input").val(ui.value)
      id = $(e.currentTarget).attr("id")
      key_param = id.split("_")[0]
      data.webele[webeleName][responsiveSelect][key_param] = ui.value
    setAllData()
    setCSSAnimation(webeleName)
    
  $('.animationRangeText').bind 'change', (e) =>
    id = $(e.currentTarget).attr("id")
    key_param = id.split("_")[0]
    data.webele[webeleName][responsiveSelect][key_param] = $(e.currentTarget).val().split(",")
    $("#" + $(e.currentTarget).attr("id").split("Input")[0]).slider(value: $(e.currentTarget).val())
    $('.animationRange').trigger("slide")

#==============================================================================
# setCSS
#==============================================================================
#------------------------------------------------------------------------------
# border
#------------------------------------------------------------------------------
exports.setCSSBorder = (key_webele) =>
  setCSSBorder(key_webele)
setCSSBorder = (key_webele) =>
  for key_section in data.css.border.section
    if key_section != "all"
      $("[data-" + data.name + "='" + key_webele + "']").css("border-" + key_section, getBorderCSS(key_webele, key_section))
      $("[data-" + data.name + "='" + key_webele + "']").css(getRadiusCSSName(key_section), data.webele[key_webele][responsiveName][animationSelect].border[key_section].radius + "px")

getBorderCSS = (key_ele, key_section) =>
  data.webele[key_ele][responsiveName][animationSelect].border[key_section].width + "px " + 
  data.webele[key_ele][responsiveName][animationSelect].border[key_section].style + " " + 
  data.colorList[data.webele[key_ele][responsiveName][animationSelect].color.border]
  
getRadiusCSSName = (key_section) ->
  radiusCSSName = ""
  switch key_section
    when "left"
      radiusCSSName = "border-top-left-radius"
    when "top"
      radiusCSSName = "border-top-right-radius"
    when "right"
      radiusCSSName = "border-bottom-right-radius"
    when "bottom"
      radiusCSSName = "border-bottom-left-radius"

#------------------------------------------------------------------------------
# shadow
#------------------------------------------------------------------------------
exports.setCSSShadow = (key_webele) =>
  setCSSShadow(key_webele)
setCSSShadow = (key_webele) =>
  cssStr = data.webele[key_webele][responsiveName][animationSelect].shadow.x + "px " + 
           data.webele[key_webele][responsiveName][animationSelect].shadow.y + "px " +
           data.webele[key_webele][responsiveName][animationSelect].shadow.shade + "px " + 
           data.webele[key_webele][responsiveName][animationSelect].shadow.size + "px " + 
           data.colorList[data.webele[key_webele][responsiveName][animationSelect].color.shadow]
  if data.webele[key_webele][responsiveName][animationSelect].shadow.inset < 0
    cssStr += " inset"
  $("[data-" + data.name + "='" + key_webele + "']").css("box-shadow", cssStr)

#------------------------------------------------------------------------------
# opacity
#------------------------------------------------------------------------------
setCSSOpacity = () =>
  $("[data-" + data.name + "='" + webeleName + "']").css("opacity", data.webele[webeleName][responsiveName][animationSelect].opacity.opacity)

#------------------------------------------------------------------------------
# font
#------------------------------------------------------------------------------
exports.setCSSFont = (key_webele) =>
  setCSSFont(key_webele)
setCSSFont = (key_webele) =>
  $("[data-" + data.name + "='" + key_webele + "']").css("text-align", data.webele[key_webele][responsiveName][animationSelect].font.align)
  $("[data-" + data.name + "='" + key_webele + "']").css("font-family", data.webele[key_webele][responsiveName][animationSelect].font.family)
  $("[data-" + data.name + "='" + key_webele + "']").css("font-size", data.webele[key_webele][responsiveName][animationSelect].font.size)
  $("[data-" + data.name + "='" + key_webele + "']").css("font-weight", data.webele[key_webele][responsiveName][animationSelect].font.weight)
  $("[data-" + data.name + "='" + key_webele + "']").css("text-shadow", 
      data.webele[key_webele][responsiveName][animationSelect].font.shadow1.x + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow1.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow1.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow1.color] + ", " + 
      data.webele[key_webele][responsiveName][animationSelect].font.shadow2.x + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow2.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow2.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow2.color] + ", " + 
      data.webele[key_webele][responsiveName][animationSelect].font.shadow3.x + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow3.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow3.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow3.color] + ", " + 
      data.webele[key_webele][responsiveName][animationSelect].font.shadow4.x + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow4.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow4.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow4.color]
    )

#------------------------------------------------------------------------------
# size
#------------------------------------------------------------------------------
setCSSSize = () =>
  $("[data-" + data.name + "='" + webeleName + "']").css("width", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].size.normal.width.val, data.webele[webeleName][responsiveName][animationSelect].size.normal.width.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("min-width", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].size.min.width.val, data.webele[webeleName][responsiveName][animationSelect].size.min.width.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("max-width", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].size.max.width.val, data.webele[webeleName][responsiveName][animationSelect].size.max.width.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("height", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].size.normal.height.val, data.webele[webeleName][responsiveName][animationSelect].size.normal.height.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("min-height", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].size.min.height.val, data.webele[webeleName][responsiveName][animationSelect].size.min.height.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("max-height", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].size.max.height.val, data.webele[webeleName][responsiveName][animationSelect].size.max.height.unit))

#------------------------------------------------------------------------------
# space
#------------------------------------------------------------------------------
setCSSSpace = () =>
  for key_section in data.css.space.section
    if key_section != "all"
      $("[data-" + data.name + "='" + webeleName + "']").css("margin-" + key_section, getUnitVal(data.webele[webeleName][responsiveName][animationSelect].space[key_section].margin.val, data.webele[webeleName][responsiveName][animationSelect].space[key_section].margin.unit))
      $("[data-" + data.name + "='" + webeleName + "']").css("padding-" + key_section, getUnitVal(data.webele[webeleName][responsiveName][animationSelect].space[key_section].padding.val, data.webele[webeleName][responsiveName][animationSelect].space[key_section].padding.unit))

#------------------------------------------------------------------------------
# position
#------------------------------------------------------------------------------
setCSSPosition = () =>
  $("[data-" + data.name + "='" + webeleName + "']").css("position", data.webele[webeleName][responsiveName][animationSelect].position.position)
  $("[data-" + data.name + "='" + webeleName + "']").css("display", data.webele[webeleName][responsiveName][animationSelect].position.display)
  $("[data-" + data.name + "='" + webeleName + "']").css("float", data.webele[webeleName][responsiveName][animationSelect].position.float)
  $("[data-" + data.name + "='" + webeleName + "']").css("clear", data.webele[webeleName][responsiveName][animationSelect].position.clear)
  $("[data-" + data.name + "='" + webeleName + "']").css("z-index", data.webele[webeleName][responsiveName][animationSelect].position["z-index"])
  $("[data-" + data.name + "='" + webeleName + "']").css("top", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].position.top.val, data.webele[webeleName][responsiveName][animationSelect].position.top.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("left", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].position.left.val, data.webele[webeleName][responsiveName][animationSelect].position.left.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("bottom", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].position.bottom.val, data.webele[webeleName][responsiveName][animationSelect].position.bottom.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("right", getUnitVal(data.webele[webeleName][responsiveName][animationSelect].position.right.val, data.webele[webeleName][responsiveName][animationSelect].position.right.unit))
  $("[data-" + data.name + "='" + webeleName + "']").css("overflow-x", data.webele[webeleName][responsiveName][animationSelect].position["overflow-x"])
  $("[data-" + data.name + "='" + webeleName + "']").css("overflow-y", data.webele[webeleName][responsiveName][animationSelect].position["overflow-y"])
  
#------------------------------------------------------------------------------
# transform
#------------------------------------------------------------------------------
setCSSTransform = () =>
  for bender in ["transform", "WebkitTransform", "-moz-transform"]
    $("[data-" + data.name + "='" + webeleName + "']").css(bender,
        "rotate3d(1,0,0," + data.webele[webeleName][responsiveName][animationSelect].transform.rotateX + "deg)" +
        "rotate3d(0,1,0," + data.webele[webeleName][responsiveName][animationSelect].transform.rotateY + "deg)" +
        "rotate3d(0,0,1," + data.webele[webeleName][responsiveName][animationSelect].transform.rotateZ + "deg)" + 
        "scale(" + data.webele[webeleName][responsiveName][animationSelect].transform.scale + ")" + 
        "skew(" + data.webele[webeleName][responsiveName][animationSelect].transform.skewX + "deg, " + data.webele[webeleName][responsiveName][animationSelect].transform.skewY + "deg)" + 
        "translate(" + data.webele[webeleName][responsiveName][animationSelect].transform.translateX + "px, " + data.webele[webeleName][responsiveName][animationSelect].transform.translateY + "px)"
        )
    $("[data-" + data.name + "='" + webeleName + "']").css(bender + "-origin", data.webele[webeleName][responsiveName][animationSelect].transform.originX + "% " + data.webele[webeleName][responsiveName][animationSelect].transform.originY + "%")

#------------------------------------------------------------------------------
# gradient
#------------------------------------------------------------------------------
exports.setCSSGradient = (key_webele) =>
  setCSSGradient(key_webele)
setCSSGradient = () =>
  cssData = data.webele[webeleName][responsiveName][animationSelect].gradient
  if cssData.direction == "circle"
    $("[data-" + data.name + "='" + webeleName + "']").css("background-image":
        "radial-gradient(" +
        data.colorList[cssData.color1.color + "_" + cssData.color1.method] + " " + cssData.percent[0] + "%," + 
        data.colorList[cssData.color2.color + "_" + cssData.color2.method] + " " + (cssData.percent[1]) + "%," +
        data.colorList[cssData.color3.color + "_" + cssData.color3.method] + " 100%"
      )
  else
    $("[data-" + data.name + "='" + webeleName + "']").css("background-image":
        "linear-gradient(to " + cssData.direction +  "," +  
        data.colorList[cssData.color1.color + "_" + cssData.color1.method] + " " + cssData.percent[0] + "%," + 
        data.colorList[cssData.color2.color + "_" + cssData.color2.method] + " " + (cssData.percent[1]) + "%," +
        data.colorList[cssData.color3.color + "_" + cssData.color3.method] + " 100%"
      )

#------------------------------------------------------------------------------
# background
#------------------------------------------------------------------------------
setCSSBackground = () =>
  $("[data-" + data.name + "='" + webeleName + "']").css("background-repeat", data.webele[webeleName][responsiveName][animationSelect].background.repeat)
  $("[data-" + data.name + "='" + webeleName + "']").css("background-attachment", data.webele[webeleName][responsiveName][animationSelect].background.attachment)
  $("[data-" + data.name + "='" + webeleName + "']").css("background-position",
    data.webele[webeleName][responsiveName][animationSelect].background.directionX + " " + getUnitVal(data.webele[webeleName][responsiveName][animationSelect].background.x.val, data.webele[webeleName][responsiveName][animationSelect].background.x.unit) + " " + 
    data.webele[webeleName][responsiveName][animationSelect].background.directionY + " " + getUnitVal(data.webele[webeleName][responsiveName][animationSelect].background.y.val, data.webele[webeleName][responsiveName][animationSelect].background.y.unit))

#------------------------------------------------------------------------------
# animation
#------------------------------------------------------------------------------
exports.setCSSAnimation = (key_webele) =>
  setCSSAnimation(key_webele)
setCSSAnimation = (key_webele) =>
  getBorder = (key_ele, key_section) =>
    data.webele[key_ele][responsiveName]["end"].border[key_section].width + "px " + 
    data.webele[key_ele][responsiveName]["end"].border[key_section].style + " " + 
    data.colorList[data.webele[key_ele][responsiveName]["end"].color.border]
  
  css = document.styleSheets[document.styleSheets.length - 1]
  str_time = "[data-webele=\""+ key_webele + "\"]{" + 
     "-webkit-transition: all "+ data.webele[key_webele][responsiveName].time + "s ease-in-out;"  +
     "-moz-transition: all "+ data.webele[key_webele][responsiveName].time + "s ease-in-out;"  +
     "-o-transition: all "+ data.webele[key_webele][responsiveName].time + "s ease-in-out;"  +
     "transition: all "+ data.webele[key_webele][responsiveName].time + "s ease-in-out;"  +
     "}"
     
  css.insertRule(str_time, css.cssRules.length)

  #color
  str = "background-color: " + data.colorList[data.webele[key_webele][responsiveName]["end"].color.BG] + "!important; "
  str += "color: " + data.colorList[data.webele[key_webele][responsiveName]["end"].color.text] + "!important; "
  #border
  for key_section in data.css.border.section
    if key_section != "all"
      str += "border-" + key_section + ": " +  getBorder(key_webele, key_section) + "!important; "
      str += getRadiusCSSName(key_section) + ": " +  data.webele[key_webele][responsiveName]["end"].border[key_section].radius + "px" + "!important; "
  #boxshadow
  str += "box-shadow: " + 
    data.webele[key_webele][responsiveName]["end"].shadow.x + "px " + 
    data.webele[key_webele][responsiveName]["end"].shadow.y + "px " +
    data.webele[key_webele][responsiveName]["end"].shadow.shade + "px " + 
    data.webele[key_webele][responsiveName]["end"].shadow.size + "px " + 
    data.colorList[data.webele[key_webele][responsiveName]["end"].color.shadow]
  if data.webele[key_webele][responsiveName]["end"].shadow.inset < 0
    str += " inset"
  str += " !important; "
  #opacity
  str += "opacity: " + data.webele[key_webele][responsiveName]["end"].opacity.opacity
  str += " !important; "  
  #font
  str += "font-size: " + data.webele[key_webele][responsiveName]["end"].font.size + "px"
  str += " !important; "
  str += "text-shadow: " + 
    data.webele[key_webele][responsiveName]["end"].font.shadow1.x + "px " + data.webele[key_webele][responsiveName]["end"].font.shadow1.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow1.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow1.color] + ", " + 
    data.webele[key_webele][responsiveName]["end"].font.shadow2.x + "px " + data.webele[key_webele][responsiveName]["end"].font.shadow2.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow2.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow2.color] + ", " + 
    data.webele[key_webele][responsiveName]["end"].font.shadow3.x + "px " + data.webele[key_webele][responsiveName]["end"].font.shadow3.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow3.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow3.color] + ", " + 
    data.webele[key_webele][responsiveName]["end"].font.shadow4.x + "px " + data.webele[key_webele][responsiveName]["end"].font.shadow4.y + "px " + data.webele[key_webele][responsiveName][animationSelect].font.shadow4.shade + "px " + data.colorList[data.webele[key_webele][responsiveName][animationSelect].font.shadow4.color]
  str += " !important; "
  #size
  str += "width: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].size.normal.width.val, data.webele[key_webele][responsiveName]["end"].size.normal.width.unit)
  str += " !important; "
  str += "min-width: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].size.min.width.val, data.webele[key_webele][responsiveName]["end"].size.min.width.unit)
  str += " !important; "
  str += "max-width: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].size.max.width.val, data.webele[key_webele][responsiveName]["end"].size.max.width.unit)
  str += " !important; "
  str += "height: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].size.normal.height.val, data.webele[key_webele][responsiveName]["end"].size.normal.height.unit)
  str += " !important; "
  str += "min-height: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].size.min.height.val, data.webele[key_webele][responsiveName]["end"].size.min.height.unit)
  str += " !important; "
  str += "max-height: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].size.max.height.val, data.webele[key_webele][responsiveName]["end"].size.max.height.unit)
  str += " !important; "
  #space
  for key_section in data.css.space.section
    if key_section != "all"
      str += "margin-" + key_section + ": " + getUnitVal(data.webele[key_webele][responsiveName]["end"].space[key_section].margin.val, data.webele[key_webele][responsiveName]["end"].space[key_section].margin.unit)
      str += " !important; "
      str += "padding-" + key_section + ": " + getUnitVal(data.webele[key_webele][responsiveName]["end"].space[key_section].padding.val, data.webele[key_webele][responsiveName]["end"].space[key_section].padding.unit)
      str += " !important; "
  #position
  str += "position: " + data.webele[key_webele][responsiveName]["end"].position.position
  str += " !important; "  
  str += "display: " + data.webele[key_webele][responsiveName]["end"].position.display
  str += " !important; "  
  str += "float: " + data.webele[key_webele][responsiveName]["end"].position.float
  str += " !important; "  
  str += "clear: " + data.webele[key_webele][responsiveName]["end"].position.clear
  str += " !important; "  
  str += "z-index: " + data.webele[key_webele][responsiveName]["end"].position["z-index"]
  str += " !important; "  
  str += "top: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].position.top.val, data.webele[key_webele][responsiveName]["end"].position.top.unit)
  str += " !important; "  
  str += "left: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].position.left.val, data.webele[key_webele][responsiveName]["end"].position.left.unit)
  str += " !important; "  
  str += "bottom: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].position.bottom.val, data.webele[key_webele][responsiveName]["end"].position.bottom.unit)
  str += " !important; "  
  str += "right: " + getUnitVal(data.webele[key_webele][responsiveName]["end"].position.right.val, data.webele[key_webele][responsiveName]["end"].position.right.unit)
  str += " !important; "  
  str += "overflow-x: " + data.webele[key_webele][responsiveName]["end"].position["overflow-x"]
  str += " !important; "  
  str += "overflow-y: " + data.webele[key_webele][responsiveName]["end"].position["overflow-y"]
  str += " !important; "  
  #transform
  for bender in ["transform", "WebkitTransform", "-moz-transform", "-webkit-transform", "-o-transform:", "-ms-transform"]
    str += bender + ": " + 
      "rotate3d(1,0,0," + data.webele[key_webele][responsiveName]["end"].transform.rotateX + "deg) " +
      "rotate3d(0,1,0," + data.webele[key_webele][responsiveName]["end"].transform.rotateY + "deg) " +
      "rotate3d(0,0,1," + data.webele[key_webele][responsiveName]["end"].transform.rotateZ + "deg) " + 
      "scale(" + data.webele[key_webele][responsiveName]["end"].transform.scale + ") " + 
      "skew(" + data.webele[key_webele][responsiveName]["end"].transform.skewX + "deg, " + data.webele[key_webele][responsiveName]["end"].transform.skewY + "deg) " + 
      "translate(" + data.webele[key_webele][responsiveName]["end"].transform.translateX + "px, " + data.webele[key_webele][responsiveName]["end"].transform.translateY + "px)"
    str += " !important; " 
  #background
  str += "background-position: " + 
    data.webele[key_webele][responsiveName]["end"].background.directionX + " " + getUnitVal(data.webele[key_webele][responsiveName]["end"].background.x.val, data.webele[key_webele][responsiveName]["end"].background.x.unit) + " " + 
    data.webele[key_webele][responsiveName]["end"].background.directionY + " " + getUnitVal(data.webele[key_webele][responsiveName]["end"].background.y.val, data.webele[key_webele][responsiveName]["end"].background.y.unit)
  str += " !important; "
  
  if data.webele[key_webele][responsiveName].trigger != "none"
    css.insertRule("[data-webele=\""+ webeleName + "\"]:" + data.webele[key_webele][responsiveName].trigger + "{" + str + "}", css.cssRules.length)

#============================================================================
# setter
#============================================================================
exports.generateStylus = () ->
  getColor = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "background-color: " + data.colorList[data.webele[key_ele][key_res][key_anime].color.BG] + "\n"
    str +=  "\t\t"  + "color: " + data.colorList[data.webele[key_ele][key_res][key_anime].color.text] + "\n"
    str +=  "\t\t"  + "a" + "\n"
    str +=  "\t\t\t" + "color: " + data.colorList[data.webele[key_ele][key_res][key_anime].color.link] + "!important\n"
    str +=  "\t\t\t" + "&:hover" + "\n"
    str +=  "\t\t\t\t" + "color: " + data.colorList[data.webele[key_ele][key_res][key_anime].color.hlink] + "!important\n"
    str

  getBorder = (key_ele, key_res, key_anime) ->
    str = ""
    for key_section in data.css.border.section
      if key_section != "all"
        str +=  "\t\t"  + "border-" + key_section + ": " +  getBorderCSS(key_ele, key_section) + "\n"
        str +=  "\t\t"  + getRadiusCSSName(key_section) + ": " +  data.webele[key_ele][key_res][key_anime].border[key_section].radius + "px" + "\n"
    str

  getShadow = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "box-shadow: " + 
             data.webele[key_ele][key_res][key_anime].shadow.x + "px " + 
             data.webele[key_ele][key_res][key_anime].shadow.y + "px " +
             data.webele[key_ele][key_res][key_anime].shadow.shade + "px " + 
             data.webele[key_ele][key_res][key_anime].shadow.size + "px " + 
             data.colorList[data.webele[key_ele][key_res][key_anime].color.shadow]
    if data.webele[key_ele][key_res][key_anime].shadow.inset < 0
      str += " inset"        
    str +=  "\n"
    str    
    
  getFont = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "text-align: " + data.webele[key_ele][key_res][key_anime].font.align + "\n"
    str +=  "\t\t"  + "font-family: " + data.webele[key_ele][key_res][key_anime].font.family + "\n"
    str +=  "\t\t"  + "font-size: " + data.webele[key_ele][key_res][key_anime].font.size + "px \n"
    str +=  "\t\t"  + "font-weight: " + data.webele[key_ele][key_res][key_anime].font.weight + "\n"
    str +=  "\t\t"  + "font-shadow: " + 
      data.webele[key_ele][key_res][key_anime].font.shadow1.x + "px " + data.webele[key_ele][key_res][key_anime].font.shadow1.y + "px " + data.webele[key_ele][key_res][key_anime].font.shadow1.shade + "px " + data.colorList[data.webele[key_ele][key_res][key_anime].font.shadow1.color] + ", " +
      data.webele[key_ele][key_res][key_anime].font.shadow2.x + "px " + data.webele[key_ele][key_res][key_anime].font.shadow2.y + "px " + data.webele[key_ele][key_res][key_anime].font.shadow2.shade + "px " + data.colorList[data.webele[key_ele][key_res][key_anime].font.shadow2.color] + ", " + 
      data.webele[key_ele][key_res][key_anime].font.shadow3.x + "px " + data.webele[key_ele][key_res][key_anime].font.shadow3.y + "px " + data.webele[key_ele][key_res][key_anime].font.shadow3.shade + "px " + data.colorList[data.webele[key_ele][key_res][key_anime].font.shadow3.color] + ", " +
      data.webele[key_ele][key_res][key_anime].font.shadow4.x + "px " + data.webele[key_ele][key_res][key_anime].font.shadow4.y + "px " + data.webele[key_ele][key_res][key_anime].font.shadow4.shade + "px " + data.colorList[data.webele[key_ele][key_res][key_anime].font.shadow4.color] + "\n"
    str

  getSpace = (key_ele, key_res, key_anime) ->
    str = ""
    for key_section in data.css.space.section
      if key_section != "all"
        str +=  "\t\t"  + "margin-" + key_section + ": " +  getUnitVal(data.webele[key_ele][key_res][key_anime].space[key_section].margin.val, data.webele[key_ele][key_res][key_anime].space[key_section].margin.unit) + "\n"
        str +=  "\t\t"  + "padding-" + key_section + ": " +  getUnitVal(data.webele[key_ele][key_res][key_anime].space[key_section].padding.val, data.webele[key_ele][key_res][key_anime].space[key_section].padding.unit) + "\n"
    str
    
  getSize = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "width: " +  getUnitVal(data.webele[key_ele][key_res][key_anime].size.normal.width.val, data.webele[key_ele][key_res][key_anime].size.normal.width.unit) + "\n"
    str +=  "\t\t"  + "min-width: " +  getUnitVal(data.webele[key_ele][key_res][key_anime].size.min.width.val, data.webele[key_ele][key_res][key_anime].size.min.width.unit) + "\n"
    str +=  "\t\t"  + "max-width: " +  getUnitVal(data.webele[key_ele][key_res][key_anime].size.max.width.val, data.webele[key_ele][key_res][key_anime].size.max.width.unit) + "\n"
    str +=  "\t\t"  + "height: " +  getUnitVal(data.webele[key_ele][key_res][key_anime].size.normal.height.val, data.webele[key_ele][key_res][key_anime].size.normal.height.unit) + "\n"
    str +=  "\t\t"  + "min-height: " +  getUnitVal(data.webele[key_ele][key_res][key_anime].size.min.height.val, data.webele[key_ele][key_res][key_anime].size.min.height.unit) + "\n"
    str +=  "\t\t"  + "max-height: " +  getUnitVal(data.webele[key_ele][key_res][key_anime].size.max.height.val, data.webele[key_ele][key_res][key_anime].size.max.height.unit) + "\n"
    str
    
  getOpacity = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "opcaity: " + data.webele[key_ele][key_res][key_anime].opacity.opacity + "\n"
    str
        
  getPosition = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "position: " + data.webele[key_ele][key_res][key_anime].position.position + "\n"
    str +=  "\t\t"  + "overflow-x: " + data.webele[key_ele][key_res][key_anime].position.display + "\n"
    str +=  "\t\t"  + "overflow-y: " + data.webele[key_ele][key_res][key_anime].position["overflow-x"] + "\n"
    str +=  "\t\t"  + "display: " + data.webele[key_ele][key_res][key_anime].position["overflow-y"] + "\n"
    str +=  "\t\t"  + "clear: " + data.webele[key_ele][key_res][key_anime].position.clear + "\n"
    str +=  "\t\t"  + "float: " + data.webele[key_ele][key_res][key_anime].position.float + "\n"
    str +=  "\t\t"  + "z-index: " + data.webele[key_ele][key_res][key_anime].position["z-index"] + "\n"
    str +=  "\t\t"  + "top: " + getUnitVal(data.webele[key_ele][key_res][key_anime].position.top.val, data.webele[webeleName][responsiveName][animationSelect].position.top.unit) + "\n"
    str +=  "\t\t"  + "left: " + getUnitVal(data.webele[key_ele][key_res][key_anime].position.left.val, data.webele[webeleName][responsiveName][animationSelect].position.left.unit) + "\n"
    str +=  "\t\t"  + "bottom: " + getUnitVal(data.webele[key_ele][key_res][key_anime].position.bottom.val, data.webele[webeleName][responsiveName][animationSelect].position.bottom.unit) + "\n"
    str +=  "\t\t"  + "right: " + getUnitVal(data.webele[key_ele][key_res][key_anime].position.right.val, data.webele[webeleName][responsiveName][animationSelect].position.right.unit) + "\n"
    str
    
  getTransform = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "transform: " + 
        "rotate3d(1,0,0," + data.webele[key_ele][key_res][key_anime].transform.rotateX + "deg) " +
        "rotate3d(0,1,0," + data.webele[key_ele][key_res][key_anime].transform.rotateY + "deg) " +
        "rotate3d(0,0,1," + data.webele[key_ele][key_res][key_anime].transform.rotateZ + "deg) " + 
        "scale(" + data.webele[key_ele][key_res][key_anime].transform.scale + ") " + 
        "skew(" + data.webele[key_ele][key_res][key_anime].transform.skewX + "deg, " + data.webele[webeleName][responsiveName][animationSelect].transform.skewY + "deg) " + 
        "translate(" + data.webele[key_ele][key_res][key_anime].transform.translateX + "px, " + data.webele[webeleName][responsiveName][animationSelect].transform.translateY + "px)" + "\n"
    str
  
  getGradiente = (key_ele, key_res, key_anime) ->
    str = ""
    cssData = data.webele[key_ele][key_res][key_anime].gradient
    if cssData.direction != "none"
      if cssData.direction == "circle"
        str +=  "\t\t"  + "background: " + 
          "radial-gradient(" +  
          data.colorList[cssData.color1.color + "_" + cssData.color1.method] + " " + cssData.percent[0] + "%," + 
          data.colorList[cssData.color2.color + "_" + cssData.color2.method] + " " + (cssData.percent[1]) + "%," +
          data.colorList[cssData.color3.color + "_" + cssData.color3.method] + " 100%)\n"
      else
        str +=  "\t\t"  + "background: " + 
          "linear-gradient(to " + cssData.direction +  "," +  
          data.colorList[cssData.color1.color + "_" + cssData.color1.method] + " " + cssData.percent[0] + "%," + 
          data.colorList[cssData.color2.color + "_" + cssData.color2.method] + " " + (cssData.percent[1]) + "%," +
          data.colorList[cssData.color3.color + "_" + cssData.color3.method] + " 100%)\n"
    str
  
  getBackground = (key_ele, key_res, key_anime) ->
    str = ""
    str +=  "\t\t"  + "background-repeat: " + data.webele[key_ele][key_res][key_anime].background.repeat + "\n"
    str +=  "\t\t"  + "background-attachment: " + data.webele[key_ele][key_res][key_anime].background.attachment + "\n"
    str +=  "\t\t"  + "background-position: " + 
      data.webele[key_ele][key_res][key_anime].background.directionX + " " + getUnitVal(data.webele[key_ele][key_res][key_anime].background.x.val, data.webele[key_ele][key_res][key_anime].background.x.unit) + " " + 
      data.webele[key_ele][key_res][key_anime].background.directionY + " " + getUnitVal(data.webele[key_ele][key_res][key_anime].background.y.val, data.webele[key_ele][key_res][key_anime].background.y.unit) + "\n"
    str
    
  stylus = ""
  for key_ele in data.eleList
    str = "[data-webele=\""+ key_ele + "\"]\n"
    for key_res in data.css.responsive
      if key_res != "all"
        if key_res == getResponsiveMax(key_res)
          key_anime = "start"
          str +=  "\t" + "@media (min-width: " + web.size.getWidthFromInnerWidthName_Min(key_res) + "px)\n"
          str +=  getColor(key_ele, key_res, key_anime)
          str +=  getBorder(key_ele, key_res, key_anime)
          str +=  getShadow(key_ele, key_res, key_anime)
          str +=  getFont(key_ele, key_res, key_anime)
          str +=  getSpace(key_ele, key_res, key_anime)
          str +=  getSize(key_ele, key_res, key_anime)
          str +=  getOpacity(key_ele, key_res, key_anime)
          str +=  getPosition(key_ele, key_res, key_anime)
          str +=  getTransform(key_ele, key_res, key_anime)
          str +=  getGradiente(key_ele, key_res, key_anime)
          str +=  getBackground(key_ele, key_res, key_anime)
          str += "\t\t" + "-webkit-transition: all "+ data.webele[key_ele][key_res].time + "s ease-in-out" + "\n"
          
    if data.webele[key_ele][key_res].trigger != "none"
      str += "[data-webele=\""+ key_ele + "\"]:" + data.webele[key_ele][key_res].trigger + "\n"
      for key_res in data.css.responsive
        if key_res != "all"
          if key_res == getResponsiveMax(key_res)
            key_anime = "end"
            str +=  "\t" + "@media (min-width: " + web.size.getWidthFromInnerWidthName_Min(key_res) + "px)\n"
            str +=  getColor(key_ele, key_res, key_anime)
            str +=  getBorder(key_ele, key_res, key_anime)
            str +=  getShadow(key_ele, key_res, key_anime)
            str +=  getFont(key_ele, key_res, key_anime)
            str +=  getSpace(key_ele, key_res, key_anime)
            str +=  getSize(key_ele, key_res, key_anime)
            str +=  getOpacity(key_ele, key_res, key_anime)
            str +=  getPosition(key_ele, key_res, key_anime)
            str +=  getTransform(key_ele, key_res, key_anime)
            str +=  getGradiente(key_ele, key_res, key_anime)
            str +=  getBackground(key_ele, key_res, key_anime)
          
    stylus = stylus + str
  stylus

#==============================================================================
# private method
#==============================================================================  
setData = () ->
  setColor = () ->
    for key, colorName of data.webele[webeleName][responsiveSelect][animationSelect].color
      colorNameSplit = colorName.split("_")
      $('select[id=\"' + key + '_selectColor\"]').val(colorNameSplit[0])
      $('select[id=\"' + key + '_selectColorMethod\"]').val(colorNameSplit[1])
  setBorder = () ->
    for key_section in data.css.border.section
      for key_param in data.css.border.param
        uiName =  key_section + "_" + key_param + "_border_"
        setBorderValToUI(uiName, key_param, data.webele[webeleName][responsiveSelect][animationSelect].border[key_section][key_param])
  setRangeAndInput = (data, cssData) ->
    for key in cssData.param
      uiName = key + "_" + cssData.name
      $("#" + uiName + "_range").slider(value: data[key])
      $("#" + uiName + "_rangeInput").val(data[key])
  setFont = () ->
    for key_param in data.css.font.param
      if key_param.indexOf("shadow") != -1
        for key_shadow in data.css.font.shadow.param
          uiName = key_param + "_" + key_shadow + "_font_"
          setFontValToUI(uiName, key_shadow, data.webele[webeleName][responsiveSelect][animationSelect].font[key_param][key_shadow])
      else
        uiName = key_param + "_font_"
        setFontValToUI(uiName, key_param, data.webele[webeleName][responsiveSelect][animationSelect].font[key_param])
  setSectionAndUnitVal = (data, cssData) ->
    for key_section in cssData.section
      for key_param in cssData.param
        uiName = key_section + "_" + key_param + "_" + cssData.name + "_"
        setUnitValToUI(uiName, data[key_section][key_param].val)
        setUnitValToUI(uiName, data[key_section][key_param].unit, true)
  setSelect = (data, css) ->
    for key_param in css.param
      uiName = key_param + "_" + css.name + "_"
      $("#" + uiName + "select_" + key_param).val(data[key_param])
  
  setPosition = () ->
    for key_param in data.css.position.param
      if key_param == "z-index"
        uiName = key_param + "_" + data.css.position.name
        $("#" + uiName + "_range").slider(value: data.webele[webeleName][responsiveSelect][animationSelect].position[key_param])
        $("#" + uiName + "_rangeInput").val(data.webele[webeleName][responsiveSelect][animationSelect].position[key_param])
      else if key_param == "top" || key_param == "left" || key_param == "bottom" || key_param == "right"
        uiName = key_param + "_" + data.css.position.name + "_"
        setUnitValToUI(uiName, data.webele[webeleName][responsiveSelect][animationSelect].position[key_param].val)
        setUnitValToUI(uiName, data.webele[webeleName][responsiveSelect][animationSelect].position[key_param].unit, true)        
      else
        uiName = key_param + "_" + data.css.position.name + "_"
        $("#" + uiName + "select").val(data.webele[webeleName][responsiveSelect][animationSelect].position[key_param])
  setGradient = () ->
    for key_param in data.css.gradient.param
      uiName = key_param + "_" + data.css.gradient.name + "_"
      if key_param.indexOf("color") != -1
        $('select[id=\"' + uiName + 'selectColor\"]').val(data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param].color)
        $('select[id=\"' + uiName + 'selectColorMethod\"]').val(data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param].method)
      else if key_param == "direction"
        $('select[id=\"' + uiName + 'select\"]').val(data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param])
      else
        $("#" + uiName + "range").slider(values: data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param])
        $("#" + uiName + "rangeInput").val(data.webele[webeleName][responsiveSelect][animationSelect].gradient[key_param])
  setBackground = () ->
    for key_param in data.css.background.param
      if key_param == "x" || key_param == "y"
        uiName = key_param + "_" + data.css.background.name + "_"
        setUnitValToUI(uiName, data.webele[webeleName][responsiveSelect][animationSelect].background[key_param].val)
        setUnitValToUI(uiName, data.webele[webeleName][responsiveSelect][animationSelect].background[key_param].unit, true)        
      else
        uiName = key_param + "_" + data.css.background.name + "_"
        $("#" + uiName + "select").val(data.webele[webeleName][responsiveSelect][animationSelect].background[key_param])
  setAnimation = () ->
    for key_param in data.css.animation.param
      uiName = key_param + "_" + data.css.animation.name + "_"
      if key_param == "trigger"
        $('select[id=\"' + uiName + 'select\"]').val(data.webele[webeleName][responsiveSelect][key_param])
      else
        $("#" + uiName + "range").slider(values: data.webele[webeleName][responsiveSelect][key_param])
        $("#" + uiName + "rangeInput").val(data.webele[webeleName][responsiveSelect][key_param])
                        
  $("#webeleName_input").val(webeleName)
  $("#responsiveMax_select").val(data.responsiveMax)
  setColor()
  setBorder()
  setRangeAndInput(data.webele[webeleName][responsiveSelect][animationSelect].shadow, data.css.shadow)
  setRangeAndInput(data.webele[webeleName][responsiveSelect][animationSelect].opacity, data.css.opacity)
  setRangeAndInput(data.webele[webeleName][responsiveSelect][animationSelect].transform, data.css.transform)
  setFont()
  setSectionAndUnitVal(data.webele[webeleName][responsiveSelect][animationSelect].space, data.css.space)
  setSectionAndUnitVal(data.webele[webeleName][responsiveSelect][animationSelect].size, data.css.size)
  setPosition()
  setGradient()
  setBackground()
  setAnimation()

#============================================================================
# setter
#============================================================================
#----------------------------------------------------------------------------
# common
#----------------------------------------------------------------------------
setSliderValFromUI = (id, val, data) ->
  splitStr = id.split("_")
  data[splitStr[0]] = val
  
setUnitValToUI = (uiName, val, isSelect) ->
  if isSelect
    $("#" + uiName + "selectUnit").val(val)
  else
    $("#" + uiName + "range" ).slider(value: val)
    $("#" + uiName + "rangeInput" ).val(val)

getUnitVal = (val, unit) ->
  if unit == "auto"
    return "auto"
  else if unit == "per"
    return val + "%"
  else if unit == "none"
    return "none"
  else
    return val + "px"

#----------------------------------------------------------------------------
# border
#----------------------------------------------------------------------------
setBorderValToUI = (uiName, key_param, val) ->
  if key_param == "style"
    $("#" + uiName + "select").val(val)
  else
    $("#" + uiName + "range" ).slider(value: val)
    $("#" + uiName + "rangeInput" ).val(val)

setBorderValFromUI = (id, val) ->
  setAllRange = (key_val, val) ->
    for key_section in data.css.border.section
      data.webele[webeleName][responsiveSelect][animationSelect].border[key_section][key_val] = val
      uiName = key_section + "_" + key_val + "_border_"
      setBorderValToUI(uiName, key_val, val)
  
  key_section = id.split("_")[0]
  key_val = id.split("_")[1]
  if key_section == "all"
    setAllRange(key_val, val)
  else
    data.webele[webeleName][responsiveSelect][animationSelect].border[key_section][key_val] = val
    
#----------------------------------------------------------------------------
# font
#----------------------------------------------------------------------------
setFontValToUI = (uiName, key_param, val) ->
  if key_param == "family" || key_param == "align"
    $("#" + uiName + "select_" + key_param).val(val)
  else if key_param == "color"
    colorName = val.split("_")
    $("#" + uiName + "selectBaseColor").val(colorName[0])    
    $("#" + uiName + "selectSiderColor").val(colorName[1])    
  else
    $("#" + uiName + "range" ).slider(value: val)
    $("#" + uiName + "rangeInput" ).val(val)

setFontValFromUI = (id, val) ->
  key_val = id.split("_")[0]
  key_shadow = id.split("_")[1]
  
  if key_val.indexOf("shadow") != -1
    data.webele[webeleName][responsiveSelect][animationSelect].font[key_val][key_shadow] = val    
  else
    data.webele[webeleName][responsiveSelect][animationSelect].font[key_val] = val    

#----------------------------------------------------------------------------
# space
#----------------------------------------------------------------------------
setSpaceValFromUI = (id, val, isSelect) ->
  setAllRange = (key_val, val, isSelect) ->
    for key_section in data.css.space.section
      uiName = key_section + "_" + key_val + "_space_"
      if isSelect
        data.webele[webeleName][responsiveSelect][animationSelect].space[key_section][key_val].unit = val
      else
        data.webele[webeleName][responsiveSelect][animationSelect].space[key_section][key_val].val = val
      setUnitValToUI(uiName, val, isSelect)
        
  key_section = id.split("_")[0]
  key_val = id.split("_")[1]
  if key_section == "all"
    setAllRange(key_val, val, isSelect)
  else
    if isSelect
      data.webele[webeleName][responsiveSelect][animationSelect].space[key_section][key_val].unit = val
    else
      data.webele[webeleName][responsiveSelect][animationSelect].space[key_section][key_val].val = val
  
#----------------------------------------------------------------------------
# size
#----------------------------------------------------------------------------
setSizeValFromUI = (id, val, isSelect) ->
  key_section = id.split("_")[0]
  key_val = id.split("_")[1]
  if isSelect
    data.webele[webeleName][responsiveSelect][animationSelect].size[key_section][key_val].unit = val
  else
    data.webele[webeleName][responsiveSelect][animationSelect].size[key_section][key_val].val = val

#-----------------------------------------------------------------------------
# position
#-----------------------------------------------------------------------------
setPositionValFromUI = (id, val, isSelect) ->
  key_val = id.split("_")[0]
  if key_val == "top" || key_val == "left" || key_val == "bottom" || key_val == "right"
    if isSelect
      data.webele[webeleName][responsiveSelect][animationSelect].position[key_val].unit = val
    else
      data.webele[webeleName][responsiveSelect][animationSelect].position[key_val].val = val
  else
    data.webele[webeleName][responsiveSelect][animationSelect].position[key_val] = val

#------------------------------------------------------------------------------
# background
#------------------------------------------------------------------------------
setBackgroundValFromUI = (id, val, isSelect) ->
  key_val = id.split("_")[0]
  if key_val == "x" || key_val == "y"
    if isSelect
      data.webele[webeleName][responsiveSelect][animationSelect].background[key_val].unit = val
    else
      data.webele[webeleName][responsiveSelect][animationSelect].background[key_val].val = val
  else
    data.webele[webeleName][responsiveSelect][animationSelect].background[key_val] = val
    
#================================================================================
# slider
#================================================================================
initSlider = () ->
  #------------------------------------------------------------------------------
  # border
  #------------------------------------------------------------------------------
  $(".borderRange").slider(
    max: 100
    min: 0
  )
  $("[id$='radius_border_range']").slider(
    max: 500
    min: 0
  )
  
  #------------------------------------------------------------------------------
  # shadow
  #------------------------------------------------------------------------------
  $(".shadowRange").slider(
    max: 1000
    min: -1000
  )
  $("[id$='shade_shadow_range']").slider(
    max: 200
    min: 0
  )
  
  $("[id$='inset_shadow_range']").slider(
    max: 0
    min: -1
  )
  
  #------------------------------------------------------------------------------
  # transform
  #------------------------------------------------------------------------------
  $("[id$='rotateX_transform_range'], [id$='rotateY_transform_range'], [id$='rotateZ_transform_range']").slider(
    max: 180
    min: -180
  )
  
  $("[id$='scale_transform_range']").slider(
    max: 10
    min: 0
    step:0.01
  )
  
  $("[id$='originX_transform_range'], [id$='originY_transform_range']").slider(
    max: 100
    min: 0
  )
  
  $("[id$='skewX_transform_range'], [id$='skewY_transform_range']").slider(
    max: 180
    min: -180
  )
  
  $("[id$='translateX_transform_range'], [id$='translateY_transform_range']").slider(
    max: 2000
    min: -2000
  )
  
  #------------------------------------------------------------------------------
  # font
  #------------------------------------------------------------------------------
  $(".fontRange").slider(
    max: 500
    min: -500
  )
  $("[id$='shade_font_range']").slider(
    max: 500
    min: 0
  )
  $("[id$='weight_font_range']").slider(
    max: 900
    min: 100
    step: 100
  )
  $("[id$='size_font_range']").slider(
    max: 100
    min: 0
  )
  
  #------------------------------------------------------------------------------
  # space
  #------------------------------------------------------------------------------
  $(".spaceRange").slider(
    max: 1000
    min: -1000
  )
  
  #------------------------------------------------------------------------------
  # size
  #------------------------------------------------------------------------------
  $(".sizeRange").slider(
    max: 2000
    min: 0
  )
  
  #------------------------------------------------------------------------------
  # opacity
  #------------------------------------------------------------------------------
  $(".opacityRange").slider(
    max: 1
    min: 0
    step:0.01
  )

  #------------------------------------------------------------------------------
  # position
  #------------------------------------------------------------------------------
  $(".positionRange").slider(
    max: 2000
    min: -2000
  )
  
  #------------------------------------------------------------------------------
  # background
  #------------------------------------------------------------------------------
  $(".backgroundRange").slider(
    max: 2000
    min: -2000
  )
  
  #------------------------------------------------------------------------------
  # gradient
  #------------------------------------------------------------------------------
  $(".gradientRange").slider(
    range: true
    max: 100
    min: 0
  )

  #------------------------------------------------------------------------------
  # animation
  #------------------------------------------------------------------------------
  $(".animationRange").slider(
    max: 10
    min: 0
    step:0.01
  )
