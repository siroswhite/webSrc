#==============================================================================
# require
#==============================================================================
debug = require("debug")
core  = require("core")
web   = require("web")
data  = require('../data')
css = require("css")

#==============================================================================
# define
#==============================================================================
webeleName       = "BG"
responsiveName   = web.size.chooseResponsiveMax(web.size.getResponsiveName(), data.responsiveMax)
responsiveSelect = ""
animationSelect  = "start"
styleSheet       = document.styleSheets[document.styleSheets.length - 1]
cssRulesNumber   = styleSheet.cssRules.length
allCSS           = ""

#==============================================================================
# interface
#==============================================================================
exports.init = () ->
  initSlider = () ->
    setSlider = (key_css, css) ->
      for key_param, param of css
        if param.child
          setSlider(key_css, param)
        else
          if param.gui and param.gui.indexOf("slider") != -1
              $(".slider[id^='" + key_css + "'][id$='" + key_param + "']").slider(
                max: param.range.max
                min: param.range.min
                step: param.range.step
                if param.gui == "sliderRange"
                  range: true
              )
    for key, param of data.css
      setSlider(key, param)

  initEvent = () ->
    commonEvent = (id, val) ->
      setWebeleData = (cssID, paramKey) ->
        setVal = (webeleData) ->
          switch webeleData.gui
            when "slider", "select"
              webeleData.val = val
            when "sliderWithInput"
              if cssID[1] == "unit"
                webeleData.val.unit = val
              else
                webeleData.val.num = val
            when "sliderRange"
              val = val.split(",") if !(val instanceof Array)
              webeleData.val.first = val[0]
              webeleData.val.second = val[1]
            when "color"
              if cssID[1] == "color"
                webeleData.val.color = val
              else
                webeleData.val.tone = val

        webeleData = data.webele[responsiveSelect][webeleName]      
        if paramKey[0] != "animation"
          webeleData = webeleData[animationSelect]

        allNum = $.inArray("all", paramKey)
        if allNum == -1
          webeleData = core.obj.selectArray(webeleData, paramKey)
          setVal(webeleData)
          setGUIVal(cssID[0], webeleData.gui, webeleData)
        else
          webeleDataList = core.obj.parallelLoop(webeleData, paramKey, allNum)
          for key, param of webeleDataList
            setVal(param)
            setGUIVal(key, param.gui, param)          

      cssID = id.split("_")
      paramKey = cssID[0].split("-")
      setWebeleData(cssID, paramKey)
      setCSS(paramKey[0])

    $('*').bind 'contextmenu', (e) =>
      if $(e.currentTarget).data(data.name)
        webeleName = $(e.currentTarget).data(data.name)
      else
        webeleName = $(e.currentTarget).parents("[data-" + data.name + "]").data(data.name)
      $("#webeleName_input").val(webeleName)
      setData()
      false

    $(window).resize (e) =>
      responsiveSelect = web.size.chooseResponsiveMax(web.size.getResponsiveName(), data.responsiveMax)
      $("#responsive_input").val(responsiveSelect)
      #debug.test.startTimer("setCSS")
      setData()
      setCSS()
      #debug.test.endTimer("setCSS")

    $("#animationState_select").change (e) =>
      animationSelect = $(e.currentTarget).val()
      setData()

    $("#responsiveMax_select").change (e) =>
      data.responsiveMax = $(e.currentTarget).val()
      $(window).trigger("resize")

    $(".setterArea .select").change (e) =>
      commonEvent($(e.currentTarget).attr("id"), $(e.currentTarget).val())
    
    $(".setterArea .slider").bind 'slide', (e, ui) =>
      val = ui.value
      val = ui.values if ui.values
      commonEvent($(e.currentTarget).attr("id"), val)

    $('.setterArea .sliderInput').change (e) =>
      commonEvent($(e.currentTarget).attr("id"), $(e.currentTarget).val())

  init_colorPicker = () ->
    $('#colorpicker_webCustomizer').farbtastic('#colorInput_webCustomizer')
    $.farbtastic('#colorpicker_webCustomizer').setColor(core.calc.hslToRGB(data.HSL))

  init_colorPicker()
  initSlider()
  initEvent()
  $("#responsiveMax_select").val(data.responsiveMax)
  $(window).trigger("resize")

setGUIVal = (id, gui, webeleData) ->
  switch gui
    when "slider"
      $("#" + id).slider(value: webeleData.val)
      $("#" + id + "_input").val(webeleData.val)
    when "select"
      $("#" + id).val(webeleData.val)
    when "sliderWithInput"
      $("#" + id).slider(value: webeleData.val.num)
      $("#" + id + "_input").val(webeleData.val.num)
      $("#" + id + "_unit").val(webeleData.val.unit)
    when "sliderRange"
      $("#" + id).slider(values: [webeleData.val.first, webeleData.val.second])
      $("#" + id + "_input").val([webeleData.val.first, webeleData.val.second])
    when "color"
      $("#" + id + "_color").val(webeleData.val.color)
      $("#" + id + "_tone").val(webeleData.val.tone)

setData = () ->
  setAreaData = (areaKey, areaParam) =>
    for key, param of areaParam
      if param.child
        for childKey in param.child
          setAreaData(areaKey + "-" + childKey, param)
      else
        if param.gui
          webeleData = data.webele[responsiveSelect][webeleName]
          if areaKey != "animation"
            webeleData = webeleData[animationSelect]
          for areaChildKey in areaKey.split("-")
            webeleData = webeleData[areaChildKey]
          id = areaKey + "-" + key
          setGUIVal(id, param.gui, webeleData[key])

  for areaKey, areaParam of data.css
    setAreaData(areaKey, areaParam)

setCSS = (cssKey) ->
  setCSSContents = (selector, key, webeleData, cssData) ->
    getName = (name) ->
      name + ": "

    cssStr = ""
    for key_param, param of cssData
      if !param.prop
        continue

      if param.prop.selector
        cssStr += "\t}\n"
        cssStr += "\t"
        for index, key of param.prop.selector.split(",")
          if index > 0
            cssStr += ","
          cssStr += selector + " " + key
        cssStr += "{ \n"
        for vender in css.core.getVender()
          cssStr += "\t\t" + vender + "transition: all " + data.webele[key_res][key_webele].animation.time.val + "s ease-in-out; \n"

      cssLineStr = ""
      if param.prop.name
        name = param.prop.name
        if param.prop.namePrefix == "key"
          if key != "normal"
            name = key + "-" + name
        if param.prop.namesuffix == "key"
          name = name + "-" + key
        cssLineStr += getName(name)
        if !param.prop.vender
          cssLineStr = "\t\t" + cssLineStr

      cssLineStr += param.prop.prefix if param.prop.prefix

      if param.child
        for index, key_child of param.child
          if param.prop and param.prop.headerName
            cssLineStr += "\t\t" + getName(param.prop.headerName + "-" + key_child)
          cssLineStr += setCSSContents(selector, key_child, webeleData[key_child], param)
      else
        if param.val != undefined
          val = webeleData[key_param].val
          switch param.prop.type
            when "val"
              cssLineStr += val
            when "path"
              cssLineStr += param.prop.path + val
            when "color"
              cssLineStr += data.colorList[val.color][val.tone]
            when "unitVal"
              if val.unit == "auto"
                cssLineStr += val.unit
              else
                cssLineStr += val.num + val.unit
            when "gradient"
              switch webeleData.direction.val
                when "none"
                  cssStr += ";\n"
                  continue
                when "circle"
                  cssLineStr += ", radial-gradient("
                else
                  cssLineStr += ", linear-gradient(to "
              cssLineStr += 
                webeleData.direction.val + ", " +
                data.colorList[webeleData.color1.val.color][webeleData.color1.val.tone] + " " + webeleData.percent.val.first + "%, " +
                data.colorList[webeleData.color2.val.color][webeleData.color2.val.tone] + " " + webeleData.percent.val.second + "%, " +
                data.colorList[webeleData.color3.val.color][webeleData.color3.val.tone] + " 100%)"
            else
              continue

      if param.prop.suffix != undefined
        cssLineStr += param.prop.suffix 
      else
        cssLineStr += ";\n"

      if param.prop.vender
        for vender in css.core.getVender()
          cssStr += "\t\t" + vender + cssLineStr
      else
        cssStr += cssLineStr

      if param.prop.selector
        cssStr += "\t}\n"
        cssStr += "\t" + selector + "{\n"
    cssStr

  allCSS = ""
  tempCSSRulesNumber = cssRulesNumber
  for key_res in data.responsiveList        
    cssStr = "@media screen and (min-width: " + web.size.getResponsiveMinWidth(key_res) + "px){ \n"
    for key_webele in data.webeleList
      for animation in ["start", "end"]
        webeleData = data.webele[key_res][key_webele]
        if animation == "start"
          selector = "[data-webele=\""+ key_webele + "\"]"
        else
          selector = "[data-webele=\""+ key_webele + "\"]:" + webeleData.animation.trigger.val
        cssStr += "\t" + selector + "{\n"
        
        if animation == "start"
          for vender in css.core.getVender()
            cssStr += "\t\t" + vender + "transition: all " + webeleData.animation.time.val + "s ease-in-out; \n"
        for key_css, param_css of data.css
          if key_css != "animation"
            cssStr += setCSSContents(selector, key_css, webeleData[animation][key_css], param_css)

        cssStr += "\t" + "}\n"
    cssStr += "}\n"
    allCSS += cssStr
    if styleSheet.cssRules[tempCSSRulesNumber]
      styleSheet.deleteRule(tempCSSRulesNumber)
    styleSheet.insertRule(cssStr, tempCSSRulesNumber)
    tempCSSRulesNumber++
  #console.log allCSS

#============================================================================
# event
#============================================================================
setAllData = () =>
  if animationSelect == "all"
    for key_state in data.css.animation.state
      data.webele[responsiveSelect][webeleName][key_state] = $.extend(true, {}, data.webele[responsiveSelect][webeleName].all)
  if responsiveSelect == "all"
    for key_res in data.css.responsive
      data.webele[webeleName][key_res] = $.extend(true, {}, data.webele[webeleName].all)